{"version":3,"file":"playerAnalyticsService-KgH4vNAD.js","sources":["../../src/services/playerAnalyticsService.ts"],"sourcesContent":["import { api } from './api';\nimport type { ApiResponse, PaginatedResponse } from '../types';\n\n// Player Analytics Types\nexport interface PlayerAnalytics {\n  playerId: number;\n  username: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  country?: string;\n  vipLevel: number;\n  riskLevel: number;\n  isActive: boolean;\n  registrationDate: string;\n  lastLoginDate?: string;\n  totalSessions: number;\n  totalBets: number;\n  totalWins: number;\n  totalRevenue: number;\n  averageSessionDuration: number;\n  averageBetSize: number;\n  favoriteGameTypes: string[];\n  preferredProviders: string[];\n  playerSegment: string;\n  lifetimeValue: number;\n  retentionScore: number;\n  engagementScore: number;\n  riskScore: number;\n}\n\nexport interface PlayerBehaviorAnalysis {\n  playerId: number;\n  analysisDate: string;\n  sessionPatterns: SessionPattern[];\n  bettingPatterns: BettingPattern[];\n  gamePreferences: GamePreference[];\n  insights: BehaviorInsight[];\n  alerts: BehaviorAlert[];\n}\n\nexport interface SessionPattern {\n  timeOfDay: string;\n  dayOfWeek: string;\n  averageDuration: number;\n  frequency: number;\n  pattern: string;\n}\n\nexport interface BettingPattern {\n  averageBetSize: number;\n  bettingVelocity: number;\n  riskTolerance: string;\n  pattern: string;\n}\n\nexport interface GamePreference {\n  gameType: string;\n  provider: string;\n  preference: number;\n  playTime: number;\n}\n\nexport interface BehaviorInsight {\n  category: string;\n  insight: string;\n  confidence: number;\n  impact: string;\n}\n\nexport interface BehaviorAlert {\n  type: string;\n  severity: string;\n  message: string;\n  timestamp: string;\n  isActive: boolean;\n}\n\nexport interface PlayerDashboard {\n  playerId: number;\n  startDate: string;\n  endDate: string;\n  overview: PlayerOverview;\n  gameStats: PlayerGameStats;\n  recommendationStats: PlayerRecommendationStats;\n  behaviorSummary: PlayerBehaviorSummary;\n  riskAssessment: PlayerRiskAssessment;\n  activityTrends: PlayerActivityTrend[];\n}\n\nexport interface PlayerOverview {\n  totalSessions: number;\n  totalPlayTime: number;\n  totalBets: number;\n  totalWins: number;\n  netRevenue: number;\n  averageSessionDuration: number;\n  lastActivity: string;\n  vipLevel: number;\n  riskLevel: number;\n}\n\nexport interface PlayerGameStats {\n  gamesPlayed: number;\n  favoriteGames: string[];\n  preferredProviders: string[];\n  gameTypeDistribution: Record<string, number>;\n  volatilityPreference: string;\n  averageRtp: number;\n}\n\nexport interface PlayerRecommendationStats {\n  totalRecommendations: number;\n  clickThroughRate: number;\n  conversionRate: number;\n  topRecommendedGames: string[];\n  algorithmPerformance: Record<string, number>;\n}\n\nexport interface PlayerBehaviorSummary {\n  playerSegment: string;\n  engagementLevel: string;\n  loyaltyScore: number;\n  churnRisk: number;\n  lifetimeValue: number;\n  behaviorTrends: string[];\n}\n\nexport interface PlayerRiskAssessment {\n  overallRiskLevel: number;\n  riskFactors: string[];\n  spendingVelocity: number;\n  sessionFrequency: number;\n  averageSessionDuration: number;\n  hasGamblingProblemIndicators: boolean;\n  lastAssessmentDate: string;\n  riskScores: Record<string, number>;\n}\n\nexport interface PlayerActivityTrend {\n  date: string;\n  sessions: number;\n  playTime: number;\n  bets: number;\n  wins: number;\n  revenue: number;\n}\n\nexport interface PlayersOverview {\n  totalPlayers: number;\n  activePlayers: number;\n  newPlayers: number;\n  churnedPlayers: number;\n  averageLifetimeValue: number;\n  totalRevenue: number;\n  playerSegments: Record<string, number>;\n  topCountries: Record<string, number>;\n  vipDistribution: Record<string, number>;\n  riskDistribution: Record<string, number>;\n}\n\nexport interface CohortAnalysis {\n  cohortType: string;\n  periods: number;\n  cohorts: CohortData[];\n  retentionMatrix: number[][];\n  averageRetention: number[];\n}\n\nexport interface CohortData {\n  cohortPeriod: string;\n  playersCount: number;\n  retentionRates: number[];\n}\n\nexport interface SegmentationAnalysis {\n  segmentName: string;\n  playerCount: number;\n  percentage: number;\n  averageRevenue: number;\n  averageSessionDuration: number;\n  retentionRate: number;\n  characteristics: string[];\n}\n\nexport interface PlayerAnalyticsRequest {\n  page?: number;\n  pageSize?: number;\n  search?: string;\n  segment?: string;\n  vipLevel?: number;\n  riskLevel?: number;\n  country?: string;\n  isActive?: boolean;\n  registrationDateFrom?: string;\n  registrationDateTo?: string;\n  sortBy?: string;\n  sortDirection?: 'asc' | 'desc';\n}\n\nclass PlayerAnalyticsService {\n  private readonly baseUrl = '/PlayerAnalytics';\n\n  async getPlayers(request: PlayerAnalyticsRequest = {}): Promise<PaginatedResponse<PlayerAnalytics>> {\n    const params = new URLSearchParams();\n\n    if (request.page) params.append('page', request.page.toString());\n    if (request.pageSize) params.append('pageSize', request.pageSize.toString());\n    if (request.search) params.append('search', request.search);\n    if (request.segment) params.append('segment', request.segment);\n    if (request.vipLevel) params.append('vipLevel', request.vipLevel.toString());\n    if (request.riskLevel) params.append('riskLevel', request.riskLevel.toString());\n    if (request.country) params.append('country', request.country);\n    if (request.isActive !== undefined) params.append('isActive', request.isActive.toString());\n    if (request.registrationDateFrom) params.append('registrationDateFrom', request.registrationDateFrom);\n    if (request.registrationDateTo) params.append('registrationDateTo', request.registrationDateTo);\n    if (request.sortBy) params.append('sortBy', request.sortBy);\n    if (request.sortDirection) params.append('sortDirection', request.sortDirection);\n\n    const response = await api.get<ApiResponse<PaginatedResponse<PlayerAnalytics>>>(\n      `${this.baseUrl}?${params.toString()}`\n    );\n    return response.data.data;\n  }\n\n  async getPlayer(playerId: number): Promise<PlayerAnalytics> {\n    // For now, get from the players list - in a real implementation this would be a dedicated endpoint\n    const players = await this.getPlayers({ pageSize: 100 });\n    const player = players.items.find(p => p.playerId === playerId);\n    if (!player) {\n      throw new Error(`Player with ID ${playerId} not found`);\n    }\n    return player;\n  }\n\n  async getPlayerDashboard(playerId: number, days: number = 30): Promise<PlayerDashboard> {\n    const response = await api.get<ApiResponse<PlayerDashboard>>(\n      `${this.baseUrl}/${playerId}/dashboard?days=${days}`\n    );\n    return response.data.data;\n  }\n\n  async getPlayerBehavior(playerId: number, days: number = 30): Promise<PlayerBehaviorAnalysis> {\n    const response = await api.get<ApiResponse<PlayerBehaviorAnalysis>>(\n      `${this.baseUrl}/${playerId}/behavior?days=${days}`\n    );\n    return response.data.data;\n  }\n\n  async getPlayersOverview(days: number = 30, limit: number = 100): Promise<PlayersOverview> {\n    const response = await api.get<ApiResponse<PlayersOverview>>(\n      `${this.baseUrl}/overview?days=${days}&limit=${limit}`\n    );\n    return response.data.data;\n  }\n\n  async getCohortAnalysis(cohortType: string = 'monthly', periods: number = 12): Promise<CohortAnalysis> {\n    const response = await api.get<ApiResponse<CohortAnalysis>>(\n      `${this.baseUrl}/cohort-analysis?cohortType=${cohortType}&periods=${periods}`\n    );\n    return response.data.data;\n  }\n\n  async getSegmentationAnalysis(days: number = 30): Promise<SegmentationAnalysis[]> {\n    const response = await api.get<ApiResponse<SegmentationAnalysis[]>>(\n      `${this.baseUrl}/segmentation?days=${days}`\n    );\n    return response.data.data;\n  }\n\n  async getPlayerActivity(days: number = 30): Promise<any> {\n    const response = await api.get<ApiResponse<any>>(\n      `${this.baseUrl}/activity?days=${days}`\n    );\n    return response.data.data;\n  }\n}\n\nexport const playerAnalyticsService = new PlayerAnalyticsService();\n"],"names":["PlayerAnalyticsService","__publicField","request","params","api","playerId","player","p","days","limit","cohortType","periods","playerAnalyticsService"],"mappings":"0MAwMA,MAAMA,CAAuB,CAA7B,cACmBC,EAAA,eAAU,oBAE3B,MAAM,WAAWC,EAAkC,GAAiD,CAC5F,MAAAC,EAAS,IAAI,gBAEf,OAAAD,EAAQ,MAAaC,EAAA,OAAO,OAAQD,EAAQ,KAAK,UAAU,EAC3DA,EAAQ,UAAiBC,EAAA,OAAO,WAAYD,EAAQ,SAAS,UAAU,EACvEA,EAAQ,QAAQC,EAAO,OAAO,SAAUD,EAAQ,MAAM,EACtDA,EAAQ,SAASC,EAAO,OAAO,UAAWD,EAAQ,OAAO,EACzDA,EAAQ,UAAiBC,EAAA,OAAO,WAAYD,EAAQ,SAAS,UAAU,EACvEA,EAAQ,WAAkBC,EAAA,OAAO,YAAaD,EAAQ,UAAU,UAAU,EAC1EA,EAAQ,SAASC,EAAO,OAAO,UAAWD,EAAQ,OAAO,EACzDA,EAAQ,WAAa,QAAWC,EAAO,OAAO,WAAYD,EAAQ,SAAS,UAAU,EACrFA,EAAQ,sBAAsBC,EAAO,OAAO,uBAAwBD,EAAQ,oBAAoB,EAChGA,EAAQ,oBAAoBC,EAAO,OAAO,qBAAsBD,EAAQ,kBAAkB,EAC1FA,EAAQ,QAAQC,EAAO,OAAO,SAAUD,EAAQ,MAAM,EACtDA,EAAQ,eAAeC,EAAO,OAAO,gBAAiBD,EAAQ,aAAa,GAE9D,MAAME,EAAI,IACzB,GAAG,KAAK,OAAO,IAAID,EAAO,UAAU,EACtC,GACgB,KAAK,IAAA,CAGvB,MAAM,UAAUE,EAA4C,CAG1D,MAAMC,GADU,MAAM,KAAK,WAAW,CAAE,SAAU,IAAK,GAChC,MAAM,KAAUC,GAAAA,EAAE,WAAaF,CAAQ,EAC9D,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,kBAAkBD,CAAQ,YAAY,EAEjD,OAAAC,CAAA,CAGT,MAAM,mBAAmBD,EAAkBG,EAAe,GAA8B,CAItF,OAHiB,MAAMJ,EAAI,IACzB,GAAG,KAAK,OAAO,IAAIC,CAAQ,mBAAmBG,CAAI,EACpD,GACgB,KAAK,IAAA,CAGvB,MAAM,kBAAkBH,EAAkBG,EAAe,GAAqC,CAI5F,OAHiB,MAAMJ,EAAI,IACzB,GAAG,KAAK,OAAO,IAAIC,CAAQ,kBAAkBG,CAAI,EACnD,GACgB,KAAK,IAAA,CAGvB,MAAM,mBAAmBA,EAAe,GAAIC,EAAgB,IAA+B,CAIzF,OAHiB,MAAML,EAAI,IACzB,GAAG,KAAK,OAAO,kBAAkBI,CAAI,UAAUC,CAAK,EACtD,GACgB,KAAK,IAAA,CAGvB,MAAM,kBAAkBC,EAAqB,UAAWC,EAAkB,GAA6B,CAIrG,OAHiB,MAAMP,EAAI,IACzB,GAAG,KAAK,OAAO,+BAA+BM,CAAU,YAAYC,CAAO,EAC7E,GACgB,KAAK,IAAA,CAGvB,MAAM,wBAAwBH,EAAe,GAAqC,CAIhF,OAHiB,MAAMJ,EAAI,IACzB,GAAG,KAAK,OAAO,sBAAsBI,CAAI,EAC3C,GACgB,KAAK,IAAA,CAGvB,MAAM,kBAAkBA,EAAe,GAAkB,CAIvD,OAHiB,MAAMJ,EAAI,IACzB,GAAG,KAAK,OAAO,kBAAkBI,CAAI,EACvC,GACgB,KAAK,IAAA,CAEzB,CAEa,MAAAI,EAAyB,IAAIZ"}