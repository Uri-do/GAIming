{"version":3,"file":"UserManagement-C2WrIutO.js","sources":["../../node_modules/lucide-react/dist/esm/icons/mail.js","../../src/components/admin/CreateUserDialog.tsx","../../src/components/admin/EditUserDialog.tsx","../../src/pages/admin/UserManagement.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.303.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Mail = createLucideIcon(\"Mail\", [\n  [\"rect\", { width: \"20\", height: \"16\", x: \"2\", y: \"4\", rx: \"2\", key: \"18n3k1\" }],\n  [\"path\", { d: \"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7\", key: \"1ocrg3\" }]\n]);\n\nexport { Mail as default };\n//# sourceMappingURL=mail.js.map\n","import { useState } from 'react'\nimport { useQuery, useMutation } from '@tanstack/react-query'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport * as z from 'zod'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog'\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport { Button } from '@/components/ui/Button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/Badge'\nimport { toast } from 'sonner'\nimport { userManagementApi, CreateUserRequest, Role } from '@/services/userManagementApi'\n\nconst createUserSchema = z.object({\n  username: z.string().min(3, 'Username must be at least 3 characters').max(50, 'Username must be less than 50 characters'),\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n  confirmPassword: z.string(),\n  displayName: z.string().min(1, 'Display name is required').max(200, 'Display name must be less than 200 characters'),\n  firstName: z.string().min(1, 'First name is required').max(100, 'First name must be less than 100 characters'),\n  lastName: z.string().min(1, 'Last name is required').max(100, 'Last name must be less than 100 characters'),\n  department: z.string().max(100, 'Department must be less than 100 characters').optional(),\n  title: z.string().max(100, 'Title must be less than 100 characters').optional(),\n  roleIds: z.array(z.string()).optional(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n})\n\ntype CreateUserFormData = z.infer<typeof createUserSchema>\n\ninterface CreateUserDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  onSuccess: () => void\n}\n\nexport function CreateUserDialog({ open, onOpenChange, onSuccess }: CreateUserDialogProps) {\n  const [selectedRoles, setSelectedRoles] = useState<string[]>([])\n\n  const form = useForm<CreateUserFormData>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      username: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      displayName: '',\n      firstName: '',\n      lastName: '',\n      department: '',\n      title: '',\n      roleIds: [],\n    },\n  })\n\n  // Fetch roles\n  const { data: roles = [], isLoading: rolesLoading } = useQuery<Role[]>({\n    queryKey: ['roles'],\n    queryFn: userManagementApi.getRoles,\n  })\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: (data: CreateUserRequest) => userManagementApi.createUser(data),\n    onSuccess: () => {\n      toast.success('User created successfully')\n      form.reset()\n      setSelectedRoles([])\n      onSuccess()\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || 'Failed to create user')\n    },\n  })\n\n  const onSubmit = (data: CreateUserFormData) => {\n    const { confirmPassword, ...createData } = data\n    createUserMutation.mutate({\n      ...createData,\n      roleIds: selectedRoles,\n    })\n  }\n\n  const handleRoleToggle = (roleId: string) => {\n    setSelectedRoles(prev => \n      prev.includes(roleId) \n        ? prev.filter(id => id !== roleId)\n        : [...prev, roleId]\n    )\n  }\n\n  const handleClose = () => {\n    form.reset()\n    setSelectedRoles([])\n    onOpenChange(false)\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create New User</DialogTitle>\n          <DialogDescription>\n            Add a new user to the system with appropriate roles and permissions.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Basic Information</h3>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"John\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Doe\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"displayName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Display Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"John Doe\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"department\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Department</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Engineering\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Software Engineer\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Account Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Account Information</h3>\n              \n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"johndoe\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Username must be unique and at least 3 characters long\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" placeholder=\"john.doe@example.com\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n                      </FormControl>\n                      <FormDescription>\n                        At least 8 characters\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Roles */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Roles</h3>\n              <FormDescription>\n                Select the roles to assign to this user\n              </FormDescription>\n              \n              {rolesLoading ? (\n                <div className=\"flex items-center justify-center py-4\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  {roles.map((role) => (\n                    <div key={role.roleId} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={role.roleId}\n                        checked={selectedRoles.includes(role.roleId)}\n                        onCheckedChange={() => handleRoleToggle(role.roleId)}\n                      />\n                      <label\n                        htmlFor={role.roleId}\n                        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          {role.name}\n                          {role.isSystemRole && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              System\n                            </Badge>\n                          )}\n                        </div>\n                        {role.description && (\n                          <div className=\"text-xs text-gray-500 mt-1\">\n                            {role.description}\n                          </div>\n                        )}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createUserMutation.isPending}\n              >\n                {createUserMutation.isPending ? 'Creating...' : 'Create User'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport { useQuery, useMutation } from '@tanstack/react-query'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport * as z from 'zod'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog'\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport { Button } from '@/components/ui/Button'\nimport { Badge } from '@/components/ui/Badge'\nimport { Switch } from '@/components/ui/switch'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { toast } from 'sonner'\nimport { userManagementApi, UpdateUserRequest, Role, User } from '@/services/userManagementApi'\n\nconst updateUserSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  displayName: z.string().min(1, 'Display name is required').max(200, 'Display name must be less than 200 characters'),\n  firstName: z.string().min(1, 'First name is required').max(100, 'First name must be less than 100 characters'),\n  lastName: z.string().min(1, 'Last name is required').max(100, 'Last name must be less than 100 characters'),\n  department: z.string().max(100, 'Department must be less than 100 characters').optional(),\n  title: z.string().max(100, 'Title must be less than 100 characters').optional(),\n  isActive: z.boolean(),\n  emailConfirmed: z.boolean(),\n  twoFactorEnabled: z.boolean(),\n  roleIds: z.array(z.string()).optional(),\n})\n\ntype UpdateUserFormData = z.infer<typeof updateUserSchema>\n\ninterface EditUserDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  user: User\n  onSuccess: () => void\n}\n\nexport function EditUserDialog({ open, onOpenChange, user, onSuccess }: EditUserDialogProps) {\n  const [selectedRoles, setSelectedRoles] = useState<string[]>([])\n\n  const form = useForm<UpdateUserFormData>({\n    resolver: zodResolver(updateUserSchema),\n    defaultValues: {\n      email: user.email,\n      displayName: user.displayName,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      department: user.department || '',\n      title: user.title || '',\n      isActive: user.isActive,\n      emailConfirmed: user.emailConfirmed,\n      twoFactorEnabled: user.twoFactorEnabled,\n      roleIds: [],\n    },\n  })\n\n  // Fetch roles\n  const { data: roles = [], isLoading: rolesLoading } = useQuery<Role[]>({\n    queryKey: ['roles'],\n    queryFn: userManagementApi.getRoles,\n  })\n\n  // Update user mutation\n  const updateUserMutation = useMutation({\n    mutationFn: (data: UpdateUserRequest) => userManagementApi.updateUser(user.userId, data),\n    onSuccess: () => {\n      toast.success('User updated successfully')\n      onSuccess()\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || 'Failed to update user')\n    },\n  })\n\n  // Initialize selected roles when roles data is loaded\n  useEffect(() => {\n    if (roles.length > 0 && user.roles.length > 0) {\n      const userRoleIds = roles\n        .filter(role => user.roles.includes(role.name))\n        .map(role => role.roleId)\n      setSelectedRoles(userRoleIds)\n    }\n  }, [roles, user.roles])\n\n  // Reset form when user changes\n  useEffect(() => {\n    form.reset({\n      email: user.email,\n      displayName: user.displayName,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      department: user.department || '',\n      title: user.title || '',\n      isActive: user.isActive,\n      emailConfirmed: user.emailConfirmed,\n      twoFactorEnabled: user.twoFactorEnabled,\n    })\n  }, [user, form])\n\n  const onSubmit = (data: UpdateUserFormData) => {\n    updateUserMutation.mutate({\n      ...data,\n      roleIds: selectedRoles,\n    })\n  }\n\n  const handleRoleToggle = (roleId: string) => {\n    setSelectedRoles(prev => \n      prev.includes(roleId) \n        ? prev.filter(id => id !== roleId)\n        : [...prev, roleId]\n    )\n  }\n\n  const handleClose = () => {\n    onOpenChange(false)\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit User</DialogTitle>\n          <DialogDescription>\n            Update user information, roles, and account settings.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Basic Information</h3>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"John\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Doe\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"displayName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Display Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"John Doe\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" placeholder=\"john.doe@example.com\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"department\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Department</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Engineering\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Software Engineer\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Account Settings */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Account Settings</h3>\n              \n              <div className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"isActive\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Active Account</FormLabel>\n                        <FormDescription>\n                          When disabled, the user cannot log in to the system\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"emailConfirmed\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Email Confirmed</FormLabel>\n                        <FormDescription>\n                          Whether the user's email address has been verified\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"twoFactorEnabled\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Two-Factor Authentication</FormLabel>\n                        <FormDescription>\n                          Require additional verification when logging in\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Roles */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Roles</h3>\n              <FormDescription>\n                Select the roles to assign to this user\n              </FormDescription>\n              \n              {rolesLoading ? (\n                <div className=\"flex items-center justify-center py-4\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  {roles.map((role) => (\n                    <div key={role.roleId} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={role.roleId}\n                        checked={selectedRoles.includes(role.roleId)}\n                        onCheckedChange={() => handleRoleToggle(role.roleId)}\n                      />\n                      <label\n                        htmlFor={role.roleId}\n                        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          {role.name}\n                          {role.isSystemRole && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              System\n                            </Badge>\n                          )}\n                        </div>\n                        {role.description && (\n                          <div className=\"text-xs text-gray-500 mt-1\">\n                            {role.description}\n                          </div>\n                        )}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* User Info */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Account Information</h3>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium\">Username:</span> {user.username}\n                </div>\n                <div>\n                  <span className=\"font-medium\">User ID:</span> {user.userId}\n                </div>\n                <div>\n                  <span className=\"font-medium\">Created:</span> {new Date(user.createdDate).toLocaleDateString()}\n                </div>\n                <div>\n                  <span className=\"font-medium\">Last Login:</span> {user.lastLogin ? new Date(user.lastLogin).toLocaleString() : 'Never'}\n                </div>\n              </div>\n            </div>\n\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={updateUserMutation.isPending}\n              >\n                {updateUserMutation.isPending ? 'Updating...' : 'Update User'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","import { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Users,\n  Plus,\n  Search,\n  Edit,\n  Trash2,\n  Shield,\n  Mail,\n  CheckCircle,\n  XCircle,\n  MoreHorizontal\n} from 'lucide-react'\nimport { Button } from '@/components/ui/Button'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/Badge'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card'\nimport { toast } from 'sonner'\nimport { userManagementApi } from '@/services/userManagementApi'\nimport { CreateUserDialog } from '@/components/admin/CreateUserDialog'\nimport { EditUserDialog } from '@/components/admin/EditUserDialog'\n\ninterface User {\n  id: number\n  userId: string\n  username: string\n  email: string\n  displayName: string\n  firstName: string\n  lastName: string\n  department?: string\n  title?: string\n  isActive: boolean\n  emailConfirmed: boolean\n  twoFactorEnabled: boolean\n  lastLogin?: Date\n  createdDate: Date\n  modifiedDate?: Date\n  roles: string[]\n  permissions: string[]\n}\n\ninterface PagedResult<T> {\n  items: T[]\n  totalCount: number\n  page: number\n  pageSize: number\n  totalPages: number\n  hasNextPage: boolean\n  hasPreviousPage: boolean\n}\n\nfunction UserManagement() {\n  const [page, setPage] = useState(1)\n  const [pageSize] = useState(20)\n  const [search, setSearch] = useState('')\n  const [isActiveFilter, setIsActiveFilter] = useState<boolean | undefined>(undefined)\n  const [selectedUser, setSelectedUser] = useState<User | null>(null)\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n\n  const queryClient = useQueryClient()\n\n  // Fetch users\n  const { data: usersData, isLoading, error } = useQuery<PagedResult<User>>({\n    queryKey: ['users', page, pageSize, search, isActiveFilter],\n    queryFn: () => userManagementApi.getUsers({ page, pageSize, search, isActive: isActiveFilter }),\n  })\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: userManagementApi.deleteUser,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['users'] })\n      toast.success('User deleted successfully')\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Failed to delete user')\n    },\n  })\n\n  const handleDeleteUser = (userId: string) => {\n    if (confirm('Are you sure you want to delete this user?')) {\n      deleteUserMutation.mutate(userId)\n    }\n  }\n\n  const handleEditUser = (user: User) => {\n    setSelectedUser(user)\n    setIsEditDialogOpen(true)\n  }\n\n  const formatDate = (date?: Date | string) => {\n    if (!date) return 'Never'\n    const dateObj = typeof date === 'string' ? new Date(date) : date\n    return dateObj.toLocaleDateString()\n  }\n\n  const formatDateTime = (date?: Date | string) => {\n    if (!date) return 'Never'\n    const dateObj = typeof date === 'string' ? new Date(date) : date\n    return dateObj.toLocaleString()\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <XCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Error loading users</h3>\n          <p className=\"text-gray-600\">Please try again later</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">User Management</h1>\n          <p className=\"text-gray-600\">Manage system users, roles, and permissions</p>\n        </div>\n        <Button onClick={() => setIsCreateDialogOpen(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add User\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{usersData?.totalCount || 0}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Users</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {usersData?.items.filter(u => u.isActive).length || 0}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Administrators</CardTitle>\n            <Shield className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {usersData?.items.filter(u => u.roles.includes('Administrator')).length || 0}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Verified Emails</CardTitle>\n            <Mail className=\"h-4 w-4 text-purple-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {usersData?.items.filter(u => u.emailConfirmed).length || 0}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Filters</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  placeholder=\"Search users...\"\n                  value={search}\n                  onChange={(e) => setSearch(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant={isActiveFilter === undefined ? \"default\" : \"outline\"}\n                onClick={() => setIsActiveFilter(undefined)}\n                size=\"sm\"\n              >\n                All\n              </Button>\n              <Button\n                variant={isActiveFilter === true ? \"default\" : \"outline\"}\n                onClick={() => setIsActiveFilter(true)}\n                size=\"sm\"\n              >\n                Active\n              </Button>\n              <Button\n                variant={isActiveFilter === false ? \"default\" : \"outline\"}\n                onClick={() => setIsActiveFilter(false)}\n                size=\"sm\"\n              >\n                Inactive\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Users Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Users</CardTitle>\n          <CardDescription>\n            {usersData?.totalCount || 0} users found\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center h-32\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>User</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Roles</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Last Login</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {usersData?.items.map((user) => (\n                  <TableRow key={user.userId}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{user.displayName}</div>\n                        <div className=\"text-sm text-gray-500\">@{user.username}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {user.email}\n                        {user.emailConfirmed && (\n                          <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {user.roles.map((role) => (\n                          <Badge key={role} variant=\"secondary\">\n                            {role}\n                          </Badge>\n                        ))}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={user.isActive ? \"default\" : \"secondary\"}>\n                        {user.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{formatDateTime(user.lastLogin)}</TableCell>\n                    <TableCell>{formatDate(user.createdDate)}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => handleEditUser(user)}>\n                            <Edit className=\"h-4 w-4 mr-2\" />\n                            Edit\n                          </DropdownMenuItem>\n                          <DropdownMenuItem \n                            onClick={() => handleDeleteUser(user.userId)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-2\" />\n                            Delete\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Pagination */}\n      {usersData && usersData.totalPages > 1 && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-gray-700\">\n            Showing {((page - 1) * pageSize) + 1} to {Math.min(page * pageSize, usersData.totalCount)} of {usersData.totalCount} users\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setPage(page - 1)}\n              disabled={!usersData.hasPreviousPage}\n            >\n              Previous\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setPage(page + 1)}\n              disabled={!usersData.hasNextPage}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Dialogs */}\n      <CreateUserDialog \n        open={isCreateDialogOpen} \n        onOpenChange={setIsCreateDialogOpen}\n        onSuccess={() => {\n          queryClient.invalidateQueries({ queryKey: ['users'] })\n          setIsCreateDialogOpen(false)\n        }}\n      />\n\n      {selectedUser && (\n        <EditUserDialog \n          open={isEditDialogOpen} \n          onOpenChange={setIsEditDialogOpen}\n          user={selectedUser}\n          onSuccess={() => {\n            queryClient.invalidateQueries({ queryKey: ['users'] })\n            setIsEditDialogOpen(false)\n            setSelectedUser(null)\n          }}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default UserManagement\n"],"names":["Mail","createLucideIcon","createUserSchema","z.object","z.string","z.array","data","CreateUserDialog","open","onOpenChange","onSuccess","selectedRoles","setSelectedRoles","useState","form","useForm","zodResolver","roles","rolesLoading","useQuery","userManagementApi","createUserMutation","useMutation","toast","error","_b","_a","onSubmit","confirmPassword","createData","handleRoleToggle","roleId","prev","id","handleClose","jsx","Dialog","jsxs","DialogContent","DialogHeader","DialogTitle","DialogDescription","Form","FormField","field","FormItem","FormLabel","FormControl","Input","FormMessage","FormDescription","role","Checkbox","Badge","DialogFooter","Button","updateUserSchema","z.boolean","EditUserDialog","user","updateUserMutation","useEffect","userRoleIds","Switch","UserManagement","page","setPage","pageSize","search","setSearch","isActiveFilter","setIsActiveFilter","selectedUser","setSelectedUser","isCreateDialogOpen","setIsCreateDialogOpen","isEditDialogOpen","setIsEditDialogOpen","queryClient","useQueryClient","usersData","isLoading","deleteUserMutation","handleDeleteUser","userId","handleEditUser","formatDate","date","formatDateTime","XCircle","Plus","Card","CardHeader","CardTitle","Users","CardContent","CheckCircle","u","Shield","Search","e","CardDescription","Table","TableHeader","TableRow","TableHead","TableBody","TableCell","DropdownMenu","DropdownMenuTrigger","MoreHorizontal","DropdownMenuContent","DropdownMenuItem","Edit","Trash2"],"mappings":"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","x_google_ignoreList":[0]}