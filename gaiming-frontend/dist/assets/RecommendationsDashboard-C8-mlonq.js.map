{"version":3,"file":"RecommendationsDashboard-C8-mlonq.js","sources":["../../src/pages/RecommendationsDashboard.tsx"],"sourcesContent":["import { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { Card } from '@/components/ui/Card'\nimport { Button } from '@/components/ui/Button'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/Badge'\n\nimport { \n  Target, \n  TrendingUp, \n\n  RefreshCw,\n  Play,\n  Eye,\n  Clock,\n  Star,\n\n  Download\n} from 'lucide-react'\nimport { apiService } from '@/services/api'\nimport { API_ENDPOINTS } from '@/config'\n\ninterface GameRecommendation {\n  id: number\n  playerId: number\n  gameId: number\n  game: {\n    gameId: number\n    gameName: string\n    gameTypeName: string\n    providerName: string\n    imageUrl?: string\n  }\n  score: number\n  algorithm: string\n  reason: string\n  position: number\n  category: string\n  context: string\n  isClicked: boolean\n  isPlayed: boolean\n  generatedDate: string\n  variant?: string\n}\n\ninterface RecommendationStats {\n  totalRecommendations: number\n  totalClicks: number\n  totalPlays: number\n  clickThroughRate: number\n  conversionRate: number\n  averageScore: number\n  activeAlgorithms: string[]\n  topPerformingGames: Array<{\n    gameId: number\n    gameName: string\n    clicks: number\n    plays: number\n    ctr: number\n  }>\n}\n\ninterface GenerateRecommendationsRequest {\n  playerId: number\n  algorithm: string\n  count: number\n  context: string\n  category?: string\n}\n\nexport default function RecommendationsDashboard() {\n  const [selectedPlayerId, setSelectedPlayerId] = useState<number>(1)\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<string>('hybrid')\n  const [recommendationCount, setRecommendationCount] = useState<number>(10)\n  const [selectedContext, setSelectedContext] = useState<string>('lobby')\n  const [searchTerm, setSearchTerm] = useState<string>('')\n  const [filterAlgorithm, setFilterAlgorithm] = useState<string>('')\n\n  const queryClient = useQueryClient()\n\n  // Fetch recommendation statistics\n  const { data: statsResponse, isLoading: _ } = useQuery<any>({\n    queryKey: ['recommendation-stats'],\n    queryFn: () => apiService.get(API_ENDPOINTS.RECOMMENDATIONS.ANALYTICS),\n    refetchInterval: 30000, // Refresh every 30 seconds\n  })\n\n  // Extract stats from API response\n  const stats: RecommendationStats | undefined = statsResponse?.data ? {\n    totalRecommendations: statsResponse.data.totalRecommendations,\n    totalClicks: statsResponse.data.totalClicks,\n    totalPlays: statsResponse.data.totalPlays,\n    clickThroughRate: statsResponse.data.clickThroughRate / 100, // Convert percentage to decimal\n    conversionRate: statsResponse.data.conversionRate / 100, // Convert percentage to decimal\n    averageScore: statsResponse.data.averageScore,\n    activeAlgorithms: statsResponse.data.algorithmPerformance?.map((alg: any) => alg.algorithm) || [],\n    topPerformingGames: statsResponse.data.topPerformingGames?.map((game: any) => ({\n      gameId: game.gameId,\n      gameName: game.gameName,\n      clicks: game.clicks,\n      plays: game.plays,\n      ctr: game.clicks > 0 ? game.plays / game.clicks : 0\n    })) || []\n  } : undefined\n\n  // Fetch recent recommendations\n  const { data: recommendationsResponse, isLoading: recommendationsLoading, refetch: refetchRecommendations } = useQuery<any>({\n    queryKey: ['recommendations', selectedPlayerId, filterAlgorithm, searchTerm],\n    queryFn: () => {\n      let url = `${API_ENDPOINTS.RECOMMENDATIONS.BASE}?playerId=${selectedPlayerId}`\n      if (filterAlgorithm) url += `&algorithm=${filterAlgorithm}`\n      if (searchTerm) url += `&search=${searchTerm}`\n      return apiService.get(url)\n    },\n  })\n\n  // Extract recommendations from API response\n  const recommendations: GameRecommendation[] = recommendationsResponse?.data?.items?.map((item: any) => ({\n    id: item.id,\n    playerId: item.playerId,\n    gameId: item.gameId,\n    game: {\n      gameId: item.game?.gameId || item.gameId,\n      gameName: item.game?.gameName || `Game ${item.gameId}`,\n      gameTypeName: item.game?.gameTypeName || 'Unknown',\n      providerName: item.game?.providerName || 'Unknown',\n      imageUrl: item.game?.imageUrl\n    },\n    score: item.score,\n    algorithm: item.algorithm,\n    reason: item.reason,\n    position: item.position,\n    category: item.category,\n    context: item.context,\n    isClicked: item.isClicked,\n    isPlayed: item.isPlayed,\n    generatedDate: item.generatedDate,\n    variant: item.variant\n  })) || []\n\n  // Generate new recommendations mutation\n  const generateRecommendationsMutation = useMutation({\n    mutationFn: (request: GenerateRecommendationsRequest) => {\n      const params = new URLSearchParams({\n        playerId: request.playerId.toString(),\n        algorithm: request.algorithm,\n        context: request.context,\n        count: request.count.toString()\n      })\n      return apiService.post(`${API_ENDPOINTS.RECOMMENDATIONS.GENERATE}?${params}`)\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['recommendations'] })\n      queryClient.invalidateQueries({ queryKey: ['recommendation-stats'] })\n    },\n  })\n\n  // Record interaction mutation\n  const recordInteractionMutation = useMutation({\n    mutationFn: ({ recommendationId, interactionType }: { recommendationId: number, interactionType: 'click' | 'play' }) => {\n      const endpoint = interactionType === 'click'\n        ? `/Recommendations/${recommendationId}/click`\n        : `/Recommendations/${recommendationId}/play`\n      return apiService.post(endpoint)\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['recommendations'] })\n      queryClient.invalidateQueries({ queryKey: ['recommendation-stats'] })\n    },\n  })\n\n  const handleGenerateRecommendations = () => {\n    generateRecommendationsMutation.mutate({\n      playerId: selectedPlayerId,\n      algorithm: selectedAlgorithm,\n      count: recommendationCount,\n      context: selectedContext,\n    })\n  }\n\n  const handleInteraction = (recommendationId: number, type: 'click' | 'play') => {\n    recordInteractionMutation.mutate({ recommendationId, interactionType: type })\n  }\n\n  const getAlgorithmColor = (algorithm: string) => {\n    const colors: Record<string, string> = {\n      'collaborative': 'bg-blue-100 text-blue-800',\n      'content-based': 'bg-green-100 text-green-800',\n      'hybrid': 'bg-purple-100 text-purple-800',\n      'bandit': 'bg-orange-100 text-orange-800',\n      'popularity': 'bg-gray-100 text-gray-800',\n    }\n    return colors[algorithm] || 'bg-gray-100 text-gray-800'\n  }\n\n  const formatScore = (score: number) => {\n    return (score * 100).toFixed(1) + '%'\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            Game Recommendations Dashboard\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n            Real-time recommendation engine management and analytics\n          </p>\n        </div>\n        <Button\n          onClick={() => {\n            refetchRecommendations()\n            queryClient.invalidateQueries({ queryKey: ['recommendation-stats'] })\n          }}\n          variant=\"outline\"\n          icon={<RefreshCw className=\"h-4 w-4\" />}\n        >\n          Refresh Data\n        </Button>\n      </div>\n\n      {/* Statistics Cards */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Target className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Total Recommendations\n                </p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {stats.totalRecommendations.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Click-Through Rate\n                </p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {formatScore(stats.clickThroughRate)}\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Play className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Conversion Rate\n                </p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {formatScore(stats.conversionRate)}\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Star className=\"h-8 w-8 text-yellow-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Average Score\n                </p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {formatScore(stats.averageScore)}\n                </p>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {/* Generation Controls */}\n      <Card className=\"p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">Generate New Recommendations</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Player ID\n            </label>\n            <Input\n              type=\"number\"\n              value={selectedPlayerId}\n              onChange={(e) => setSelectedPlayerId(Number(e.target.value))}\n              placeholder=\"Enter player ID\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Algorithm\n            </label>\n            <select\n              value={selectedAlgorithm}\n              onChange={(e) => setSelectedAlgorithm(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm\"\n            >\n              <option value=\"hybrid\">Hybrid</option>\n              <option value=\"collaborative\">Collaborative Filtering</option>\n              <option value=\"content-based\">Content-Based</option>\n              <option value=\"bandit\">Multi-Armed Bandit</option>\n              <option value=\"popularity\">Popularity-Based</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Count\n            </label>\n            <Input\n              type=\"number\"\n              value={recommendationCount}\n              onChange={(e) => setRecommendationCount(Number(e.target.value))}\n              min={1}\n              max={50}\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Context\n            </label>\n            <select\n              value={selectedContext}\n              onChange={(e) => setSelectedContext(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm\"\n            >\n              <option value=\"lobby\">Lobby</option>\n              <option value=\"post-game\">Post-Game</option>\n              <option value=\"profile\">Profile</option>\n              <option value=\"homepage\">Homepage</option>\n            </select>\n          </div>\n\n          <div className=\"flex items-end\">\n            <Button\n              onClick={handleGenerateRecommendations}\n              loading={generateRecommendationsMutation.isPending}\n              className=\"w-full\"\n            >\n              Generate\n            </Button>\n          </div>\n        </div>\n      </Card>\n\n      {/* Filters and Search */}\n      <Card className=\"p-6\">\n        <div className=\"flex flex-col md:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <Input\n              placeholder=\"Search games...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n          <div className=\"w-full md:w-48\">\n            <select\n              value={filterAlgorithm}\n              onChange={(e) => setFilterAlgorithm(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm\"\n            >\n              <option value=\"\">All Algorithms</option>\n              <option value=\"hybrid\">Hybrid</option>\n              <option value=\"collaborative\">Collaborative</option>\n              <option value=\"content-based\">Content-Based</option>\n              <option value=\"bandit\">Bandit</option>\n              <option value=\"popularity\">Popularity</option>\n            </select>\n          </div>\n        </div>\n      </Card>\n\n      {/* Recommendations List */}\n      <Card className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-semibold\">Recent Recommendations</h2>\n          <Button variant=\"outline\" icon={<Download className=\"h-4 w-4\" />}>\n            Export Data\n          </Button>\n        </div>\n\n        {recommendationsLoading ? (\n          <div className=\"flex items-center justify-center py-12\">\n            <RefreshCw className=\"h-8 w-8 animate-spin text-gray-400\" />\n          </div>\n        ) : recommendations && recommendations.length > 0 ? (\n          <div className=\"space-y-4\">\n            {recommendations.map((rec) => (\n              <div\n                key={rec.id}\n                className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    {rec.game.imageUrl && (\n                      <img\n                        src={rec.game.imageUrl}\n                        alt={rec.game.gameName}\n                        className=\"w-16 h-16 rounded-lg object-cover\"\n                      />\n                    )}\n                    <div>\n                      <h3 className=\"font-semibold text-lg\">{rec.game.gameName}</h3>\n                      <p className=\"text-gray-600 dark:text-gray-400\">\n                        {rec.game.gameTypeName} • {rec.game.providerName}\n                      </p>\n                      <p className=\"text-sm text-gray-500 mt-1\">{rec.reason}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Score</p>\n                      <p className=\"font-semibold\">{formatScore(rec.score)}</p>\n                    </div>\n                    \n                    <Badge className={getAlgorithmColor(rec.algorithm)}>\n                      {rec.algorithm}\n                    </Badge>\n\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        variant={rec.isClicked ? \"default\" : \"outline\"}\n                        onClick={() => handleInteraction(rec.id, 'click')}\n                        disabled={rec.isClicked}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant={rec.isPlayed ? \"default\" : \"outline\"}\n                        onClick={() => handleInteraction(rec.id, 'play')}\n                        disabled={rec.isPlayed}\n                      >\n                        <Play className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"mt-3 flex items-center justify-between text-sm text-gray-500\">\n                  <div className=\"flex items-center space-x-4\">\n                    <span>Position: #{rec.position}</span>\n                    <span>Context: {rec.context}</span>\n                    <span>Category: {rec.category}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span>{new Date(rec.generatedDate).toLocaleString()}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <Target className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n              No recommendations found\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Generate some recommendations to get started.\n            </p>\n          </div>\n        )}\n      </Card>\n    </div>\n  )\n}\n"],"names":["RecommendationsDashboard","selectedPlayerId","setSelectedPlayerId","useState","selectedAlgorithm","setSelectedAlgorithm","recommendationCount","setRecommendationCount","selectedContext","setSelectedContext","searchTerm","setSearchTerm","filterAlgorithm","setFilterAlgorithm","queryClient","useQueryClient","statsResponse","_","useQuery","apiService","API_ENDPOINTS","stats","_a","alg","_b","game","recommendationsResponse","recommendationsLoading","refetchRecommendations","url","recommendations","_d","_c","item","_e","generateRecommendationsMutation","useMutation","request","params","recordInteractionMutation","recommendationId","interactionType","endpoint","handleGenerateRecommendations","handleInteraction","type","getAlgorithmColor","algorithm","formatScore","score","jsxs","jsx","Button","RefreshCw","Card","Target","TrendingUp","Play","Star","Input","e","Download","rec","Badge","Eye","Clock"],"mappings":"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"}