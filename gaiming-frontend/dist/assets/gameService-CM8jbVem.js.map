{"version":3,"file":"gameService-CM8jbVem.js","sources":["../../src/services/gameService.ts"],"sourcesContent":["import { apiService } from './api';\nimport {\n  Game,\n  GameProvider,\n  GameType,\n  Volatility,\n  Theme,\n  PaginatedResponse,\n} from '@/types';\n\nexport const gameService = {\n  // Get all active games\n  async getGames(params?: {\n    page?: number;\n    pageSize?: number;\n    search?: string;\n    provider?: number;\n    gameType?: number;\n    volatility?: number;\n    theme?: number;\n    isActive?: boolean;\n    isMobile?: boolean;\n    isDesktop?: boolean;\n    sortBy?: string;\n    sortDirection?: 'asc' | 'desc';\n  }): Promise<PaginatedResponse<Game>> {\n    return apiService.getPaginated<Game>('/games', params);\n  },\n\n  // Get game by ID\n  async getGame(gameId: number): Promise<Game> {\n    return apiService.get<Game>(`/games/${gameId}`);\n  },\n\n  // Get games by provider\n  async getGamesByProvider(\n    providerId: number,\n    params?: {\n      page?: number;\n      pageSize?: number;\n      isActive?: boolean;\n    }\n  ): Promise<PaginatedResponse<Game>> {\n    return apiService.getPaginated<Game>(`/games/provider/${providerId}`, params);\n  },\n\n  // Get games by type\n  async getGamesByType(\n    gameTypeId: number,\n    params?: {\n      page?: number;\n      pageSize?: number;\n      isActive?: boolean;\n    }\n  ): Promise<PaginatedResponse<Game>> {\n    return apiService.getPaginated<Game>(`/games/type/${gameTypeId}`, params);\n  },\n\n  // Get popular games\n  async getPopularGames(params?: {\n    count?: number;\n    timeframe?: 'day' | 'week' | 'month' | 'year';\n  }): Promise<Game[]> {\n    return apiService.get<Game[]>('/games/popular', { params });\n  },\n\n  // Get new games\n  async getNewGames(params?: {\n    count?: number;\n    daysBack?: number;\n  }): Promise<Game[]> {\n    return apiService.get<Game[]>('/games/new', { params });\n  },\n\n  // Search games\n  async searchGames(params: {\n    query: string;\n    page?: number;\n    pageSize?: number;\n    filters?: {\n      provider?: number;\n      gameType?: number;\n      volatility?: number;\n      theme?: number;\n      minBet?: number;\n      maxBet?: number;\n      isMobile?: boolean;\n      isDesktop?: boolean;\n    };\n  }): Promise<PaginatedResponse<Game>> {\n    return apiService.getPaginated<Game>('/games/search', params);\n  },\n\n  // Get game providers\n  async getProviders(params?: {\n    isActive?: boolean;\n  }): Promise<GameProvider[]> {\n    return apiService.get<GameProvider[]>('/games/providers', { params });\n  },\n\n  // Get game types\n  async getGameTypes(): Promise<GameType[]> {\n    return apiService.get<GameType[]>('/games/types');\n  },\n\n  // Get volatility levels\n  async getVolatilities(): Promise<Volatility[]> {\n    return apiService.get<Volatility[]>('/games/volatilities');\n  },\n\n  // Get themes\n  async getThemes(): Promise<Theme[]> {\n    return apiService.get<Theme[]>('/games/themes');\n  },\n\n  // Get game statistics\n  async getGameStats(gameId: number): Promise<{\n    totalPlayers: number;\n    activePlayers: number;\n    totalSessions: number;\n    averageSessionDuration: number;\n    totalRevenue: number;\n    averageRating: number;\n    popularityRank: number;\n    retentionRate: number;\n    conversionRate: number;\n  }> {\n    return apiService.get(`/games/${gameId}/stats`);\n  },\n\n  // Get game performance metrics\n  async getGamePerformance(\n    gameId: number,\n    params?: {\n      startDate?: string;\n      endDate?: string;\n      granularity?: 'hour' | 'day' | 'week' | 'month';\n    }\n  ): Promise<Array<{\n    timestamp: string;\n    players: number;\n    sessions: number;\n    revenue: number;\n    averageSessionDuration: number;\n  }>> {\n    return apiService.get(`/games/${gameId}/performance`, { params });\n  },\n\n  // Get similar games\n  async getSimilarGames(\n    gameId: number,\n    count?: number\n  ): Promise<Game[]> {\n    return apiService.get<Game[]>(`/games/${gameId}/similar`, {\n      params: { count },\n    });\n  },\n\n  // Get game recommendations for a specific game (content-based)\n  async getGameRecommendations(\n    gameId: number,\n    count?: number\n  ): Promise<Game[]> {\n    return apiService.get<Game[]>(`/games/${gameId}/recommendations`, {\n      params: { count },\n    });\n  },\n\n  // Get trending games\n  async getTrendingGames(params?: {\n    count?: number;\n    timeframe?: 'hour' | 'day' | 'week';\n    category?: 'rising' | 'hot' | 'viral';\n  }): Promise<Game[]> {\n    return apiService.get<Game[]>('/games/trending', { params });\n  },\n\n  // Get games by volatility\n  async getGamesByVolatility(\n    volatilityId: number,\n    params?: {\n      page?: number;\n      pageSize?: number;\n      isActive?: boolean;\n    }\n  ): Promise<PaginatedResponse<Game>> {\n    return apiService.getPaginated<Game>(`/games/volatility/${volatilityId}`, params);\n  },\n\n  // Get games by theme\n  async getGamesByTheme(\n    themeId: number,\n    params?: {\n      page?: number;\n      pageSize?: number;\n      isActive?: boolean;\n    }\n  ): Promise<PaginatedResponse<Game>> {\n    return apiService.getPaginated<Game>(`/games/theme/${themeId}`, params);\n  },\n\n  // Get game analytics summary\n  async getGameAnalytics(params?: {\n    startDate?: string;\n    endDate?: string;\n  }): Promise<{\n    totalGames: number;\n    activeGames: number;\n    totalProviders: number;\n    averageRTP: number;\n    mostPopularProvider: string;\n    mostPopularGameType: string;\n    gamesByVolatility: Record<string, number>;\n    gamesByTheme: Record<string, number>;\n    platformDistribution: {\n      mobile: number;\n      desktop: number;\n      both: number;\n    };\n  }> {\n    return apiService.get('/games/analytics', { params });\n  },\n\n  // Export games data\n  async exportGames(params?: {\n    format?: 'csv' | 'excel' | 'json';\n    provider?: number;\n    gameType?: number;\n    isActive?: boolean;\n  }): Promise<void> {\n    const queryParams = new URLSearchParams(params as Record<string, string>).toString();\n    return apiService.download(`/games/export?${queryParams}`, 'games.csv');\n  },\n\n  // Get game features for ML\n  async getGameFeatures(gameId: number): Promise<{\n    gameId: number;\n    features: Record<string, number>;\n    categories: string[];\n    tags: string[];\n    metadata: Record<string, any>;\n  }> {\n    return apiService.get(`/games/${gameId}/features`);\n  },\n\n  // Get games with low performance\n  async getLowPerformanceGames(params?: {\n    threshold?: number;\n    timeframe?: 'week' | 'month' | 'quarter';\n    metric?: 'players' | 'revenue' | 'sessions' | 'retention';\n  }): Promise<Array<{\n    game: Game;\n    performanceScore: number;\n    issues: string[];\n    recommendations: string[];\n  }>> {\n    return apiService.get('/games/low-performance', { params });\n  },\n\n  // Get game lifecycle analytics\n  async getGameLifecycle(gameId: number): Promise<{\n    launchDate: string;\n    peakDate: string;\n    currentPhase: 'launch' | 'growth' | 'maturity' | 'decline';\n    lifetimeRevenue: number;\n    lifetimePlayers: number;\n    projectedLifetime: number;\n    healthScore: number;\n  }> {\n    return apiService.get(`/games/${gameId}/lifecycle`);\n  },\n\n  // Get competitive analysis\n  async getCompetitiveAnalysis(gameId: number): Promise<{\n    directCompetitors: Game[];\n    marketPosition: number;\n    strengthsWeaknesses: {\n      strengths: string[];\n      weaknesses: string[];\n      opportunities: string[];\n      threats: string[];\n    };\n    benchmarkMetrics: Record<string, {\n      value: number;\n      percentile: number;\n      benchmark: number;\n    }>;\n  }> {\n    return apiService.get(`/games/${gameId}/competitive-analysis`);\n  },\n};\n"],"names":["gameService","params","apiService","gameId","providerId","gameTypeId","count","volatilityId","themeId","queryParams"],"mappings":"iCAUO,MAAMA,EAAc,CAEzB,MAAM,SAASC,EAasB,CAC5B,OAAAC,EAAW,aAAmB,SAAUD,CAAM,CACvD,EAGA,MAAM,QAAQE,EAA+B,CAC3C,OAAOD,EAAW,IAAU,UAAUC,CAAM,EAAE,CAChD,EAGA,MAAM,mBACJC,EACAH,EAKkC,CAClC,OAAOC,EAAW,aAAmB,mBAAmBE,CAAU,GAAIH,CAAM,CAC9E,EAGA,MAAM,eACJI,EACAJ,EAKkC,CAClC,OAAOC,EAAW,aAAmB,eAAeG,CAAU,GAAIJ,CAAM,CAC1E,EAGA,MAAM,gBAAgBA,EAGF,CAClB,OAAOC,EAAW,IAAY,iBAAkB,CAAE,OAAAD,EAAQ,CAC5D,EAGA,MAAM,YAAYA,EAGE,CAClB,OAAOC,EAAW,IAAY,aAAc,CAAE,OAAAD,EAAQ,CACxD,EAGA,MAAM,YAAYA,EAcmB,CAC5B,OAAAC,EAAW,aAAmB,gBAAiBD,CAAM,CAC9D,EAGA,MAAM,aAAaA,EAES,CAC1B,OAAOC,EAAW,IAAoB,mBAAoB,CAAE,OAAAD,EAAQ,CACtE,EAGA,MAAM,cAAoC,CACjC,OAAAC,EAAW,IAAgB,cAAc,CAClD,EAGA,MAAM,iBAAyC,CACtC,OAAAA,EAAW,IAAkB,qBAAqB,CAC3D,EAGA,MAAM,WAA8B,CAC3B,OAAAA,EAAW,IAAa,eAAe,CAChD,EAGA,MAAM,aAAaC,EAUhB,CACD,OAAOD,EAAW,IAAI,UAAUC,CAAM,QAAQ,CAChD,EAGA,MAAM,mBACJA,EACAF,EAWE,CACF,OAAOC,EAAW,IAAI,UAAUC,CAAM,eAAgB,CAAE,OAAAF,EAAQ,CAClE,EAGA,MAAM,gBACJE,EACAG,EACiB,CACjB,OAAOJ,EAAW,IAAY,UAAUC,CAAM,WAAY,CACxD,OAAQ,CAAE,MAAAG,CAAM,CAAA,CACjB,CACH,EAGA,MAAM,uBACJH,EACAG,EACiB,CACjB,OAAOJ,EAAW,IAAY,UAAUC,CAAM,mBAAoB,CAChE,OAAQ,CAAE,MAAAG,CAAM,CAAA,CACjB,CACH,EAGA,MAAM,iBAAiBL,EAIH,CAClB,OAAOC,EAAW,IAAY,kBAAmB,CAAE,OAAAD,EAAQ,CAC7D,EAGA,MAAM,qBACJM,EACAN,EAKkC,CAClC,OAAOC,EAAW,aAAmB,qBAAqBK,CAAY,GAAIN,CAAM,CAClF,EAGA,MAAM,gBACJO,EACAP,EAKkC,CAClC,OAAOC,EAAW,aAAmB,gBAAgBM,CAAO,GAAIP,CAAM,CACxE,EAGA,MAAM,iBAAiBA,EAiBpB,CACD,OAAOC,EAAW,IAAI,mBAAoB,CAAE,OAAAD,EAAQ,CACtD,EAGA,MAAM,YAAYA,EAKA,CAChB,MAAMQ,EAAc,IAAI,gBAAgBR,CAAgC,EAAE,SAAS,EACnF,OAAOC,EAAW,SAAS,iBAAiBO,CAAW,GAAI,WAAW,CACxE,EAGA,MAAM,gBAAgBN,EAMnB,CACD,OAAOD,EAAW,IAAI,UAAUC,CAAM,WAAW,CACnD,EAGA,MAAM,uBAAuBF,EASzB,CACF,OAAOC,EAAW,IAAI,yBAA0B,CAAE,OAAAD,EAAQ,CAC5D,EAGA,MAAM,iBAAiBE,EAQpB,CACD,OAAOD,EAAW,IAAI,UAAUC,CAAM,YAAY,CACpD,EAGA,MAAM,uBAAuBA,EAc1B,CACD,OAAOD,EAAW,IAAI,UAAUC,CAAM,uBAAuB,CAAA,CAEjE"}