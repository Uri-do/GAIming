{"version":3,"file":"RoleManagement-BiBc6mUo.js","sources":["../../src/components/ui/textarea.tsx","../../src/components/admin/CreateRoleDialog.tsx","../../src/components/admin/EditRoleDialog.tsx","../../src/pages/admin/RoleManagement.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","import { useState } from 'react'\nimport { useQuery, useMutation } from '@tanstack/react-query'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport * as z from 'zod'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog'\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Button } from '@/components/ui/Button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/Badge'\nimport { toast } from 'sonner'\nimport { userManagementApi, Permission } from '@/services/userManagementApi'\n\nconst createRoleSchema = z.object({\n  name: z.string().min(1, 'Role name is required').max(100, 'Role name must be less than 100 characters'),\n  description: z.string().max(500, 'Description must be less than 500 characters').optional(),\n  permissionIds: z.array(z.string()).optional(),\n})\n\ntype CreateRoleFormData = z.infer<typeof createRoleSchema>\n\ninterface CreateRoleDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  onSuccess: () => void\n}\n\nexport function CreateRoleDialog({ open, onOpenChange, onSuccess }: CreateRoleDialogProps) {\n  const [selectedPermissions, setSelectedPermissions] = useState<string[]>([])\n\n  const form = useForm<CreateRoleFormData>({\n    resolver: zodResolver(createRoleSchema),\n    defaultValues: {\n      name: '',\n      description: '',\n      permissionIds: [],\n    },\n  })\n\n  // Fetch permissions\n  const { data: permissions = [], isLoading: permissionsLoading } = useQuery<Permission[]>({\n    queryKey: ['permissions'],\n    queryFn: userManagementApi.getPermissions,\n  })\n\n  // Create role mutation\n  const createRoleMutation = useMutation({\n    mutationFn: (data: any) => userManagementApi.createRole(data),\n    onSuccess: () => {\n      toast.success('Role created successfully')\n      form.reset()\n      setSelectedPermissions([])\n      onSuccess()\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || 'Failed to create role')\n    },\n  })\n\n  const onSubmit = (data: CreateRoleFormData) => {\n    createRoleMutation.mutate({\n      ...data,\n      permissionIds: selectedPermissions,\n    })\n  }\n\n  const handlePermissionToggle = (permissionId: string) => {\n    setSelectedPermissions(prev => \n      prev.includes(permissionId) \n        ? prev.filter(id => id !== permissionId)\n        : [...prev, permissionId]\n    )\n  }\n\n  const handleClose = () => {\n    form.reset()\n    setSelectedPermissions([])\n    onOpenChange(false)\n  }\n\n  // Group permissions by resource\n  const groupedPermissions = permissions.reduce((groups, permission) => {\n    const resource = permission.resource\n    if (!groups[resource]) {\n      groups[resource] = []\n    }\n    groups[resource].push(permission)\n    return groups\n  }, {} as Record<string, Permission[]>)\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create New Role</DialogTitle>\n          <DialogDescription>\n            Create a new role and assign permissions to control user access.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Basic Information</h3>\n              \n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., Content Manager\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      A unique name for this role\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Describe what this role is for...\"\n                        className=\"resize-none\"\n                        rows={3}\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Optional description of the role's purpose\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Permissions */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Permissions</h3>\n              <FormDescription>\n                Select the permissions to assign to this role\n              </FormDescription>\n              \n              {permissionsLoading ? (\n                <div className=\"flex items-center justify-center py-4\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n                </div>\n              ) : (\n                <div className=\"space-y-6\">\n                  {Object.entries(groupedPermissions).map(([resource, resourcePermissions]) => (\n                    <div key={resource} className=\"space-y-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <h4 className=\"font-medium text-gray-900\">{resource}</h4>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {resourcePermissions.length} permissions\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 pl-4\">\n                        {resourcePermissions.map((permission) => (\n                          <div key={permission.permissionId} className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              id={permission.permissionId}\n                              checked={selectedPermissions.includes(permission.permissionId)}\n                              onCheckedChange={() => handlePermissionToggle(permission.permissionId)}\n                            />\n                            <label\n                              htmlFor={permission.permissionId}\n                              className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                            >\n                              <div className=\"flex items-center gap-2\">\n                                <span>{permission.action}</span>\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {permission.action}\n                                </Badge>\n                              </div>\n                              {permission.description && (\n                                <div className=\"text-xs text-gray-500 mt-1\">\n                                  {permission.description}\n                                </div>\n                              )}\n                            </label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Summary */}\n            {selectedPermissions.length > 0 && (\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-gray-900\">Selected Permissions</h4>\n                <div className=\"flex flex-wrap gap-1\">\n                  {selectedPermissions.map((permissionId) => {\n                    const permission = permissions.find(p => p.permissionId === permissionId)\n                    return permission ? (\n                      <Badge key={permissionId} variant=\"secondary\" className=\"text-xs\">\n                        {permission.resource}.{permission.action}\n                      </Badge>\n                    ) : null\n                  })}\n                </div>\n              </div>\n            )}\n\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createRoleMutation.isPending}\n              >\n                {createRoleMutation.isPending ? 'Creating...' : 'Create Role'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport { useQuery, useMutation } from '@tanstack/react-query'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport * as z from 'zod'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog'\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Button } from '@/components/ui/Button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Switch } from '@/components/ui/switch'\nimport { Badge } from '@/components/ui/Badge'\nimport { toast } from 'sonner'\nimport { userManagementApi, Permission, Role } from '@/services/userManagementApi'\n\nconst updateRoleSchema = z.object({\n  name: z.string().min(1, 'Role name is required').max(100, 'Role name must be less than 100 characters'),\n  description: z.string().max(500, 'Description must be less than 500 characters').optional(),\n  isActive: z.boolean(),\n  permissionIds: z.array(z.string()).optional(),\n})\n\ntype UpdateRoleFormData = z.infer<typeof updateRoleSchema>\n\ninterface EditRoleDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  role: Role\n  onSuccess: () => void\n}\n\nexport function EditRoleDialog({ open, onOpenChange, role, onSuccess }: EditRoleDialogProps) {\n  const [selectedPermissions, setSelectedPermissions] = useState<string[]>([])\n\n  const form = useForm<UpdateRoleFormData>({\n    resolver: zodResolver(updateRoleSchema),\n    defaultValues: {\n      name: role.name,\n      description: role.description || '',\n      isActive: role.isActive,\n      permissionIds: [],\n    },\n  })\n\n  // Fetch permissions\n  const { data: permissions = [], isLoading: permissionsLoading } = useQuery<Permission[]>({\n    queryKey: ['permissions'],\n    queryFn: userManagementApi.getPermissions,\n  })\n\n  // Update role mutation\n  const updateRoleMutation = useMutation({\n    mutationFn: (data: any) => userManagementApi.updateRole(role.roleId, data),\n    onSuccess: () => {\n      toast.success('Role updated successfully')\n      onSuccess()\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || 'Failed to update role')\n    },\n  })\n\n  // Initialize selected permissions when permissions data is loaded\n  useEffect(() => {\n    if (permissions.length > 0 && role.permissions.length > 0) {\n      const rolePermissionIds = role.permissions.map(p => p.permissionId)\n      setSelectedPermissions(rolePermissionIds)\n    }\n  }, [permissions, role.permissions])\n\n  // Reset form when role changes\n  useEffect(() => {\n    form.reset({\n      name: role.name,\n      description: role.description || '',\n      isActive: role.isActive,\n    })\n  }, [role, form])\n\n  const onSubmit = (data: UpdateRoleFormData) => {\n    updateRoleMutation.mutate({\n      ...data,\n      permissionIds: selectedPermissions,\n    })\n  }\n\n  const handlePermissionToggle = (permissionId: string) => {\n    setSelectedPermissions(prev => \n      prev.includes(permissionId) \n        ? prev.filter(id => id !== permissionId)\n        : [...prev, permissionId]\n    )\n  }\n\n  const handleClose = () => {\n    onOpenChange(false)\n  }\n\n  // Group permissions by resource\n  const groupedPermissions = permissions.reduce((groups, permission) => {\n    const resource = permission.resource\n    if (!groups[resource]) {\n      groups[resource] = []\n    }\n    groups[resource].push(permission)\n    return groups\n  }, {} as Record<string, Permission[]>)\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Role</DialogTitle>\n          <DialogDescription>\n            Update role information and permissions.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Basic Information</h3>\n              \n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role Name</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"e.g., Content Manager\" \n                        disabled={role.isSystemRole}\n                        {...field} \n                      />\n                    </FormControl>\n                    {role.isSystemRole && (\n                      <FormDescription>\n                        System role names cannot be changed\n                      </FormDescription>\n                    )}\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Describe what this role is for...\"\n                        className=\"resize-none\"\n                        rows={3}\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Active Role</FormLabel>\n                      <FormDescription>\n                        When disabled, users with this role will lose its permissions\n                      </FormDescription>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        disabled={role.isSystemRole}\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Permissions */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Permissions</h3>\n              <FormDescription>\n                Select the permissions to assign to this role\n              </FormDescription>\n              \n              {permissionsLoading ? (\n                <div className=\"flex items-center justify-center py-4\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n                </div>\n              ) : (\n                <div className=\"space-y-6\">\n                  {Object.entries(groupedPermissions).map(([resource, resourcePermissions]) => (\n                    <div key={resource} className=\"space-y-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <h4 className=\"font-medium text-gray-900\">{resource}</h4>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {resourcePermissions.length} permissions\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 pl-4\">\n                        {resourcePermissions.map((permission) => (\n                          <div key={permission.permissionId} className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              id={permission.permissionId}\n                              checked={selectedPermissions.includes(permission.permissionId)}\n                              onCheckedChange={() => handlePermissionToggle(permission.permissionId)}\n                              disabled={role.isSystemRole}\n                            />\n                            <label\n                              htmlFor={permission.permissionId}\n                              className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                            >\n                              <div className=\"flex items-center gap-2\">\n                                <span>{permission.action}</span>\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {permission.action}\n                                </Badge>\n                              </div>\n                              {permission.description && (\n                                <div className=\"text-xs text-gray-500 mt-1\">\n                                  {permission.description}\n                                </div>\n                              )}\n                            </label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Role Info */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Role Information</h3>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium\">Role ID:</span> {role.roleId}\n                </div>\n                <div>\n                  <span className=\"font-medium\">Type:</span> {role.isSystemRole ? 'System Role' : 'Custom Role'}\n                </div>\n                <div>\n                  <span className=\"font-medium\">Created:</span> {new Date(role.createdDate).toLocaleDateString()}\n                </div>\n                <div>\n                  <span className=\"font-medium\">Modified:</span> {role.modifiedDate ? new Date(role.modifiedDate).toLocaleDateString() : 'Never'}\n                </div>\n              </div>\n            </div>\n\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={updateRoleMutation.isPending}\n              >\n                {updateRoleMutation.isPending ? 'Updating...' : 'Update Role'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","import { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Shield,\n  Plus,\n  Search,\n  Edit,\n  Trash2,\n  Users,\n  Key,\n  XCircle,\n  MoreHorizontal,\n  Settings\n} from 'lucide-react'\nimport { Button } from '@/components/ui/Button'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/Badge'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card'\nimport { toast } from 'sonner'\nimport { userManagementApi, Role } from '@/services/userManagementApi'\nimport { CreateRoleDialog } from '@/components/admin/CreateRoleDialog'\nimport { EditRoleDialog } from '@/components/admin/EditRoleDialog'\n\nfunction RoleManagement() {\n  const [search, setSearch] = useState('')\n  const [selectedRole, setSelectedRole] = useState<Role | null>(null)\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n\n  const queryClient = useQueryClient()\n\n  // Fetch roles\n  const { data: roles = [], isLoading, error } = useQuery<Role[]>({\n    queryKey: ['roles'],\n    queryFn: userManagementApi.getRoles,\n  })\n\n  // Delete role mutation\n  const deleteRoleMutation = useMutation({\n    mutationFn: userManagementApi.deleteRole,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['roles'] })\n      toast.success('Role deleted successfully')\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Failed to delete role')\n    },\n  })\n\n  const handleDeleteRole = (roleId: string) => {\n    if (confirm('Are you sure you want to delete this role?')) {\n      deleteRoleMutation.mutate(roleId)\n    }\n  }\n\n  const handleEditRole = (role: Role) => {\n    setSelectedRole(role)\n    setIsEditDialogOpen(true)\n  }\n\n  const formatDate = (date: string | Date) => {\n    const dateObj = typeof date === 'string' ? new Date(date) : date\n    return dateObj.toLocaleDateString()\n  }\n\n  // Filter roles based on search\n  const filteredRoles = roles.filter(role =>\n    role.name.toLowerCase().includes(search.toLowerCase()) ||\n    role.description?.toLowerCase().includes(search.toLowerCase())\n  )\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <XCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Error loading roles</h3>\n          <p className=\"text-gray-600\">Please try again later</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Role Management</h1>\n          <p className=\"text-gray-600\">Manage system roles and their permissions</p>\n        </div>\n        <Button onClick={() => setIsCreateDialogOpen(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Role\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Roles</CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{roles.length}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">System Roles</CardTitle>\n            <Settings className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {roles.filter(r => r.isSystemRole).length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Custom Roles</CardTitle>\n            <Users className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {roles.filter(r => !r.isSystemRole).length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Permissions</CardTitle>\n            <Key className=\"h-4 w-4 text-purple-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {roles.reduce((total, role) => total + role.permissions.length, 0)}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Search Roles</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search roles...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Roles Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Roles</CardTitle>\n          <CardDescription>\n            {filteredRoles.length} roles found\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center h-32\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Role</TableHead>\n                  <TableHead>Description</TableHead>\n                  <TableHead>Permissions</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredRoles.map((role) => (\n                  <TableRow key={role.roleId}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Shield className=\"h-4 w-4 text-blue-600\" />\n                        <div>\n                          <div className=\"font-medium\">{role.name}</div>\n                          <div className=\"text-sm text-gray-500\">ID: {role.roleId.slice(0, 8)}...</div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"max-w-xs truncate\">\n                        {role.description || 'No description'}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"font-medium\">{role.permissions.length}</span>\n                        <span className=\"text-sm text-gray-500\">permissions</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={role.isSystemRole ? \"default\" : \"secondary\"}>\n                        {role.isSystemRole ? \"System\" : \"Custom\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={role.isActive ? \"default\" : \"secondary\"}>\n                        {role.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{formatDate(role.createdDate)}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => handleEditRole(role)}>\n                            <Edit className=\"h-4 w-4 mr-2\" />\n                            Edit\n                          </DropdownMenuItem>\n                          {!role.isSystemRole && (\n                            <DropdownMenuItem \n                              onClick={() => handleDeleteRole(role.roleId)}\n                              className=\"text-red-600\"\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete\n                            </DropdownMenuItem>\n                          )}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Dialogs */}\n      <CreateRoleDialog \n        open={isCreateDialogOpen} \n        onOpenChange={setIsCreateDialogOpen}\n        onSuccess={() => {\n          queryClient.invalidateQueries({ queryKey: ['roles'] })\n          setIsCreateDialogOpen(false)\n        }}\n      />\n\n      {selectedRole && (\n        <EditRoleDialog \n          open={isEditDialogOpen} \n          onOpenChange={setIsEditDialogOpen}\n          role={selectedRole}\n          onSuccess={() => {\n            queryClient.invalidateQueries({ queryKey: ['roles'] })\n            setIsEditDialogOpen(false)\n            setSelectedRole(null)\n          }}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default RoleManagement\n"],"names":["Textarea","React.forwardRef","className","props","ref","jsx","cn","createRoleSchema","z.object","z.string","z.array","CreateRoleDialog","open","onOpenChange","onSuccess","selectedPermissions","setSelectedPermissions","useState","form","useForm","zodResolver","permissions","permissionsLoading","useQuery","userManagementApi","createRoleMutation","useMutation","data","toast","error","_b","_a","onSubmit","handlePermissionToggle","permissionId","prev","id","handleClose","groupedPermissions","groups","permission","resource","Dialog","jsxs","DialogContent","DialogHeader","DialogTitle","DialogDescription","Form","FormField","field","FormItem","FormLabel","FormControl","Input","FormDescription","FormMessage","resourcePermissions","Badge","Checkbox","p","DialogFooter","Button","updateRoleSchema","z.boolean","EditRoleDialog","role","updateRoleMutation","useEffect","rolePermissionIds","Switch","RoleManagement","search","setSearch","selectedRole","setSelectedRole","isCreateDialogOpen","setIsCreateDialogOpen","isEditDialogOpen","setIsEditDialogOpen","queryClient","useQueryClient","roles","isLoading","deleteRoleMutation","handleDeleteRole","roleId","handleEditRole","formatDate","date","filteredRoles","XCircle","Plus","Card","CardHeader","CardTitle","Shield","CardContent","Settings","r","Users","Key","total","Search","e","CardDescription","Table","TableHeader","TableRow","TableHead","TableBody","TableCell","DropdownMenu","DropdownMenuTrigger","MoreHorizontal","DropdownMenuContent","DropdownMenuItem","Edit","Trash2"],"mappings":"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"}