{"version":3,"file":"Settings-euUa--7E.js","sources":["../../node_modules/lucide-react/dist/esm/icons/rotate-ccw.js","../../src/services/settingsApi.ts","../../src/pages/Settings.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.303.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst RotateCcw = createLucideIcon(\"RotateCcw\", [\n  [\"path\", { d: \"M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8\", key: \"1357e3\" }],\n  [\"path\", { d: \"M3 3v5h5\", key: \"1xhq8a\" }]\n]);\n\nexport { RotateCcw as default };\n//# sourceMappingURL=rotate-ccw.js.map\n","import { apiService } from './api'\n\n// Settings interfaces matching the backend DTOs\nexport interface GeneralSettings {\n  systemName: string\n  systemDescription: string\n  defaultLanguage: string\n  defaultTimezone: string\n  maintenanceMode: boolean\n  maintenanceMessage: string\n  logLevel: string\n  sessionTimeout: number\n  maxConcurrentSessions: number\n}\n\nexport interface RecommendationSettings {\n  defaultAlgorithm: string\n  maxRecommendations: number\n  minConfidenceScore: number\n  enableABTesting: boolean\n  cacheExpirationMinutes: number\n  realTimeUpdates: boolean\n  personalizationEnabled: boolean\n  diversityWeight: number\n  popularityWeight: number\n  recencyWeight: number\n}\n\nexport interface AnalyticsSettings {\n  enableTracking: boolean\n  dataRetentionDays: number\n  realTimeAnalytics: boolean\n  exportFormats: string[]\n  autoReportGeneration: boolean\n  reportSchedule: string\n  metricsRefreshInterval: number\n  enablePredictiveAnalytics: boolean\n}\n\nexport interface SecuritySettings {\n  requireHttps: boolean\n  enableTwoFactor: boolean\n  passwordMinLength: number\n  passwordRequireUppercase: boolean\n  passwordRequireLowercase: boolean\n  passwordRequireNumbers: boolean\n  passwordRequireSpecialChars: boolean\n  maxLoginAttempts: number\n  lockoutDurationMinutes: number\n  jwtExpirationMinutes: number\n  refreshTokenExpirationDays: number\n  enableAuditLogging: boolean\n  auditLogRetentionDays: number\n}\n\nexport interface PerformanceSettings {\n  enableCaching: boolean\n  cacheExpirationMinutes: number\n  maxConcurrentRequests: number\n  requestTimeoutSeconds: number\n  enableCompression: boolean\n  enableRateLimiting: boolean\n  rateLimitRequests: number\n  rateLimitWindowMinutes: number\n  databaseConnectionPoolSize: number\n  enableQueryOptimization: boolean\n}\n\nexport interface NotificationSettings {\n  enableEmailNotifications: boolean\n  enableSmsNotifications: boolean\n  enablePushNotifications: boolean\n  smtpServer: string\n  smtpPort: number\n  smtpUsername: string\n  smtpUseSsl: boolean\n  defaultFromEmail: string\n  defaultFromName: string\n}\n\nexport interface SystemSettings {\n  general: GeneralSettings\n  recommendation: RecommendationSettings\n  analytics: AnalyticsSettings\n  security: SecuritySettings\n  performance: PerformanceSettings\n  notifications: NotificationSettings\n}\n\nexport const settingsApi = {\n  // Get all settings\n  async getSettings(): Promise<SystemSettings> {\n    const response = await apiService.get<SystemSettings>('/Settings')\n    return response\n  },\n\n  // Update all settings\n  async updateSettings(settings: SystemSettings): Promise<SystemSettings> {\n    const response = await apiService.put<SystemSettings>('/Settings', settings)\n    return response\n  },\n\n  // Get specific category settings\n  async getCategorySettings(category: string): Promise<any> {\n    const response = await apiService.get<any>(`/Settings/${category}`)\n    return response\n  },\n\n  // Update specific category settings\n  async updateCategorySettings(category: string, settings: any): Promise<any> {\n    const response = await apiService.put<any>(`/Settings/${category}`, settings)\n    return response\n  },\n\n  // Reset settings to defaults\n  async resetSettings(category?: string): Promise<{ message: string; resetAt: string }> {\n    const url = category ? `/Settings/reset?category=${category}` : '/Settings/reset'\n    const response = await apiService.post<{ message: string; resetAt: string }>(url)\n    return response\n  },\n\n  // Export settings\n  async exportSettings(format: 'json' | 'xml' = 'json'): Promise<void> {\n    await apiService.download(`/Settings/export?format=${format}`, `gaiming-settings-${new Date().toISOString().split('T')[0]}.${format}`)\n  }\n}\n","import React, { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card'\nimport { Button } from '@/components/ui/Button'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/Badge'\nimport { toast } from 'sonner'\nimport { settingsApi, type SystemSettings } from '@/services/settingsApi'\nimport {\n  Settings as SettingsIcon,\n  Save,\n  RotateCcw,\n  Download,\n  Shield,\n  Zap,\n  Bell,\n  Brain,\n  BarChart3\n} from 'lucide-react'\n\nconst Settings: React.FC = () => {\n  const [activeTab, setActiveTab] = useState('general')\n  const queryClient = useQueryClient()\n\n  // Fetch settings\n  const { data: settings, isLoading, error } = useQuery<SystemSettings>({\n    queryKey: ['settings'],\n    queryFn: settingsApi.getSettings,\n  })\n\n  // Update settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: settingsApi.updateSettings,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['settings'] })\n      toast.success('Settings updated successfully')\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Failed to update settings')\n    },\n  })\n\n  // Reset settings mutation\n  const resetSettingsMutation = useMutation({\n    mutationFn: (category?: string) => settingsApi.resetSettings(category),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['settings'] })\n      toast.success('Settings reset successfully')\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Failed to reset settings')\n    },\n  })\n\n  const handleSaveSettings = () => {\n    if (settings) {\n      updateSettingsMutation.mutate(settings)\n    }\n  }\n\n  const handleResetSettings = (category?: string) => {\n    if (confirm(`Are you sure you want to reset ${category || 'all'} settings to defaults?`)) {\n      resetSettingsMutation.mutate(category)\n    }\n  }\n\n  const handleExportSettings = () => {\n    settingsApi.exportSettings('json')\n    toast.success('Settings exported successfully')\n  }\n\n  const tabs = [\n    { id: 'general', label: 'General', icon: SettingsIcon },\n    { id: 'recommendation', label: 'Recommendations', icon: Brain },\n    { id: 'analytics', label: 'Analytics', icon: BarChart3 },\n    { id: 'security', label: 'Security', icon: Shield },\n    { id: 'performance', label: 'Performance', icon: Zap },\n    { id: 'notifications', label: 'Notifications', icon: Bell },\n  ]\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Settings</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">Configure system settings and preferences</p>\n        </div>\n        <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n          <p className=\"text-red-800 dark:text-red-200\">Failed to load settings. Please try again later.</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">System Settings</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">Configure system-wide settings and preferences</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={handleExportSettings}>\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Button variant=\"outline\" onClick={() => handleResetSettings()}>\n            <RotateCcw className=\"h-4 w-4 mr-2\" />\n            Reset All\n          </Button>\n          <Button onClick={handleSaveSettings} disabled={updateSettingsMutation.isPending}>\n            <Save className=\"h-4 w-4 mr-2\" />\n            {updateSettingsMutation.isPending ? 'Saving...' : 'Save Changes'}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Sidebar */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Categories</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <nav className=\"space-y-1\">\n                {tabs.map((tab) => {\n                  const Icon = tab.icon\n                  return (\n                    <button\n                      key={tab.id}\n                      onClick={() => setActiveTab(tab.id)}\n                      className={`w-full flex items-center px-4 py-2 text-sm font-medium rounded-none border-r-2 transition-colors ${\n                        activeTab === tab.id\n                          ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 border-blue-500'\n                          : 'text-gray-600 dark:text-gray-400 border-transparent hover:bg-gray-50 dark:hover:bg-gray-800'\n                      }`}\n                    >\n                      <Icon className=\"h-4 w-4 mr-3\" />\n                      {tab.label}\n                    </button>\n                  )\n                })}\n              </nav>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Content */}\n        <div className=\"lg:col-span-3\">\n          {isLoading ? (\n            <Card>\n              <CardContent className=\"flex items-center justify-center h-64\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-6\">\n              {activeTab === 'general' && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>General Settings</CardTitle>\n                    <CardDescription>Basic system configuration</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">System Name</label>\n                        <Input\n                          value={settings?.general?.systemName || 'GAIming System'}\n                          placeholder=\"GAIming System\"\n                          readOnly\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Default Language</label>\n                        <Input\n                          value={settings?.general?.defaultLanguage || 'en-US'}\n                          placeholder=\"en-US\"\n                          readOnly\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Default Timezone</label>\n                        <Input\n                          value={settings?.general?.defaultTimezone || 'UTC'}\n                          placeholder=\"UTC\"\n                          readOnly\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Session Timeout (minutes)</label>\n                        <Input\n                          type=\"number\"\n                          value={settings?.general?.sessionTimeout || 60}\n                          placeholder=\"60\"\n                          readOnly\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">System Description</label>\n                      <Input\n                        value={settings?.general?.systemDescription || 'AI-powered gaming recommendation system'}\n                        placeholder=\"AI-powered gaming recommendation system\"\n                        readOnly\n                      />\n                    </div>\n                    <div className=\"flex items-center gap-4\">\n                      <Badge variant={settings?.general?.maintenanceMode ? \"error\" : \"default\"}>\n                        {settings?.general?.maintenanceMode ? \"Maintenance Mode ON\" : \"System Online\"}\n                      </Badge>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleResetSettings('general')}\n                      >\n                        Reset General Settings\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {activeTab === 'recommendation' && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Recommendation Engine</CardTitle>\n                    <CardDescription>Configure AI recommendation algorithms</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Default Algorithm</label>\n                        <Input\n                          value={settings?.recommendation?.defaultAlgorithm || 'collaborative-filtering'}\n                          placeholder=\"collaborative-filtering\"\n                          readOnly\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Max Recommendations</label>\n                        <Input\n                          type=\"number\"\n                          value={settings?.recommendation?.maxRecommendations || 10}\n                          placeholder=\"10\"\n                          readOnly\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Min Confidence Score</label>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          value={settings?.recommendation?.minConfidenceScore || 0.5}\n                          placeholder=\"0.5\"\n                          readOnly\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Cache Expiration (minutes)</label>\n                        <Input\n                          type=\"number\"\n                          value={settings?.recommendation?.cacheExpirationMinutes || 30}\n                          placeholder=\"30\"\n                          readOnly\n                        />\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-4\">\n                      <Badge variant={settings?.recommendation?.enableABTesting ? \"default\" : \"secondary\"}>\n                        A/B Testing {settings?.recommendation?.enableABTesting ? \"Enabled\" : \"Disabled\"}\n                      </Badge>\n                      <Badge variant={settings?.recommendation?.realTimeUpdates ? \"default\" : \"secondary\"}>\n                        Real-time Updates {settings?.recommendation?.realTimeUpdates ? \"On\" : \"Off\"}\n                      </Badge>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleResetSettings('recommendation')}\n                      >\n                        Reset Recommendation Settings\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Other tabs */}\n              {activeTab !== 'general' && activeTab !== 'recommendation' && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>{tabs.find(t => t.id === activeTab)?.label} Settings</CardTitle>\n                    <CardDescription>Configuration options for {activeTab}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-8\">\n                      <div className=\"text-4xl mb-4\">🚧</div>\n                      <p className=\"text-gray-600 dark:text-gray-400\">\n                        {tabs.find(t => t.id === activeTab)?.label} settings panel coming soon...\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Settings\n"],"names":["RotateCcw","createLucideIcon","settingsApi","apiService","settings","category","url","format","Settings","activeTab","setActiveTab","useState","queryClient","useQueryClient","isLoading","error","useQuery","updateSettingsMutation","useMutation","toast","resetSettingsMutation","handleSaveSettings","handleResetSettings","handleExportSettings","tabs","SettingsIcon","Brain","BarChart3","Shield","Zap","Bell","jsxs","jsx","Button","Download","Save","Card","CardHeader","CardTitle","CardContent","tab","Icon","CardDescription","Input","_a","_b","_c","_d","_e","Badge","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","t","_q"],"mappings":"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","x_google_ignoreList":[0]}