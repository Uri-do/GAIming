{"version":3,"file":"userManagementApi-Cp6gFy_9.js","sources":["../../src/services/userManagementApi.ts"],"sourcesContent":["import { apiService } from './api'\n\nexport interface User {\n  id: number\n  userId: string\n  username: string\n  email: string\n  displayName: string\n  firstName: string\n  lastName: string\n  department?: string\n  title?: string\n  isActive: boolean\n  emailConfirmed: boolean\n  twoFactorEnabled: boolean\n  lastLogin?: Date\n  createdDate: Date\n  modifiedDate?: Date\n  roles: string[]\n  permissions: string[]\n}\n\nexport interface Role {\n  id: number\n  roleId: string\n  name: string\n  description?: string\n  isSystemRole: boolean\n  isActive: boolean\n  createdDate: Date\n  modifiedDate?: Date\n  permissions: Permission[]\n}\n\nexport interface Permission {\n  id: number\n  permissionId: string\n  name: string\n  description?: string\n  resource: string\n  action: string\n}\n\nexport interface PagedResult<T> {\n  items: T[]\n  totalCount: number\n  page: number\n  pageSize: number\n  totalPages: number\n  hasNextPage: boolean\n  hasPreviousPage: boolean\n}\n\nexport interface GetUsersParams {\n  page?: number\n  pageSize?: number\n  search?: string\n  isActive?: boolean\n}\n\nexport interface CreateUserRequest {\n  username: string\n  email: string\n  password: string\n  displayName: string\n  firstName: string\n  lastName: string\n  department?: string\n  title?: string\n  roleIds?: string[]\n}\n\nexport interface UpdateUserRequest {\n  email: string\n  displayName: string\n  firstName: string\n  lastName: string\n  department?: string\n  title?: string\n  isActive: boolean\n  emailConfirmed: boolean\n  twoFactorEnabled: boolean\n  roleIds?: string[]\n}\n\nexport interface CreateRoleRequest {\n  name: string\n  description?: string\n  permissionIds?: string[]\n}\n\nexport interface UpdateRoleRequest {\n  name: string\n  description?: string\n  isActive: boolean\n  permissionIds?: string[]\n}\n\nexport const userManagementApi = {\n  // Users\n  async getUsers(params: GetUsersParams = {}): Promise<PagedResult<User>> {\n    const searchParams = new URLSearchParams()\n\n    if (params.page) searchParams.append('page', params.page.toString())\n    if (params.pageSize) searchParams.append('pageSize', params.pageSize.toString())\n    if (params.search) searchParams.append('search', params.search)\n    if (params.isActive !== undefined) searchParams.append('isActive', params.isActive.toString())\n\n    const response = await apiService.get<PagedResult<User>>(`/Users?${searchParams.toString()}`)\n    return response\n  },\n\n  async getUser(userId: string): Promise<User> {\n    const response = await apiService.get<User>(`/Users/${userId}`)\n    return response\n  },\n\n  async createUser(request: CreateUserRequest): Promise<User> {\n    const response = await apiService.post<User>('/Users', request)\n    return response\n  },\n\n  async updateUser(userId: string, request: UpdateUserRequest): Promise<User> {\n    const response = await apiService.put<User>(`/Users/${userId}`, request)\n    return response\n  },\n\n  async deleteUser(userId: string): Promise<void> {\n    await apiService.delete(`/Users/${userId}`)\n  },\n\n  // Roles\n  async getRoles(): Promise<Role[]> {\n    const response = await apiService.get<Role[]>('/RoleManagement')\n    return response\n  },\n\n  async getRole(roleId: string): Promise<Role> {\n    const response = await apiService.get<Role>(`/RoleManagement/${roleId}`)\n    return response\n  },\n\n  async createRole(request: CreateRoleRequest): Promise<Role> {\n    const response = await apiService.post<Role>('/RoleManagement', request)\n    return response\n  },\n\n  async updateRole(roleId: string, request: UpdateRoleRequest): Promise<Role> {\n    const response = await apiService.put<Role>(`/RoleManagement/${roleId}`, request)\n    return response\n  },\n\n  async deleteRole(roleId: string): Promise<void> {\n    await apiService.delete(`/RoleManagement/${roleId}`)\n  },\n\n  // Permissions\n  async getPermissions(): Promise<Permission[]> {\n    const response = await apiService.get<Permission[]>('/RoleManagement/permissions')\n    return response\n  },\n\n  // User role management\n  async assignRole(userId: string, roleId: string): Promise<void> {\n    await apiService.post(`/Users/${userId}/roles/${roleId}`)\n  },\n\n  async removeRole(userId: string, roleId: string): Promise<void> {\n    await apiService.delete(`/Users/${userId}/roles/${roleId}`)\n  },\n\n  // User status management\n  async activateUser(userId: string): Promise<void> {\n    await apiService.post(`/Users/${userId}/activate`)\n  },\n\n  async deactivateUser(userId: string): Promise<void> {\n    await apiService.post(`/Users/${userId}/deactivate`)\n  },\n\n  async lockUser(userId: string, duration?: number): Promise<void> {\n    await apiService.post(`/Users/${userId}/lock`, { duration })\n  },\n\n  async unlockUser(userId: string): Promise<void> {\n    await apiService.post(`/Users/${userId}/unlock`)\n  },\n\n  // Password management\n  async resetPassword(userId: string): Promise<{ temporaryPassword: string }> {\n    const response = await apiService.post<{ temporaryPassword: string }>(`/Users/${userId}/reset-password`)\n    return response\n  },\n\n  async forcePasswordChange(userId: string): Promise<void> {\n    await apiService.post(`/Users/${userId}/force-password-change`)\n  },\n\n  // Bulk operations\n  async bulkActivateUsers(userIds: string[]): Promise<void> {\n    await apiService.post('/Users/bulk/activate', { userIds })\n  },\n\n  async bulkDeactivateUsers(userIds: string[]): Promise<void> {\n    await apiService.post('/Users/bulk/deactivate', { userIds })\n  },\n\n  async bulkDeleteUsers(userIds: string[]): Promise<void> {\n    await apiService.post('/Users/bulk/delete', { userIds })\n  },\n\n  async bulkAssignRole(userIds: string[], roleId: string): Promise<void> {\n    await apiService.post('/Users/bulk/assign-role', { userIds, roleId })\n  },\n\n  async bulkRemoveRole(userIds: string[], roleId: string): Promise<void> {\n    await apiService.post('/Users/bulk/remove-role', { userIds, roleId })\n  },\n\n  // Export/Import\n  async exportUsers(format: 'csv' | 'excel' = 'csv'): Promise<Blob> {\n    const response = await apiService.download(`/Users/export?format=${format}`)\n    return response as unknown as Blob\n  },\n\n  async importUsers(file: File): Promise<{ success: number; errors: string[] }> {\n    const response = await apiService.upload<{ success: number; errors: string[] }>('/Users/import', file)\n    return response\n  },\n\n  // Audit and activity\n  async getUserActivity(userId: string, days: number = 30): Promise<any[]> {\n    const response = await apiService.get<any[]>(`/Users/${userId}/activity?days=${days}`)\n    return response\n  },\n\n  async getUserSessions(userId: string): Promise<any[]> {\n    const response = await apiService.get<any[]>(`/Users/${userId}/sessions`)\n    return response\n  },\n\n  async terminateUserSessions(userId: string): Promise<void> {\n    await apiService.post(`/Users/${userId}/terminate-sessions`)\n  }\n}\n"],"names":["userManagementApi","params","searchParams","apiService","userId","request","roleId","duration","userIds","format","file","days"],"mappings":"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"}