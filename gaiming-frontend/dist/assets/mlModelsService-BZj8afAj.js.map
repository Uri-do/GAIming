{"version":3,"file":"mlModelsService-BZj8afAj.js","sources":["../../src/services/mlModelsService.ts"],"sourcesContent":["import { api } from './api';\nimport type { ApiResponse, PaginatedResponse, ModelPerformanceMetrics } from '../types';\n\n// ML Models Types\nexport interface MLModel {\n  id: number;\n  name: string;\n  description: string;\n  modelType: string;\n  version: string;\n  status: 'training' | 'trained' | 'deployed' | 'retired' | 'failed';\n  filePath?: string;\n  configuration: Record<string, any>;\n  metadata: Record<string, any>;\n  createdDate: string;\n  lastTrainedDate?: string;\n  deployedDate?: string;\n  createdBy: string;\n  isActive: boolean;\n}\n\nexport interface ModelTrainingJob {\n  id: number;\n  modelId: number;\n  modelName: string;\n  status: 'queued' | 'running' | 'completed' | 'failed' | 'cancelled';\n  progress: number;\n  startTime?: string;\n  endTime?: string;\n  duration?: number;\n  trainingData: TrainingDataInfo;\n  hyperparameters: Record<string, any>;\n  metrics?: ModelPerformanceMetrics;\n  logs: string[];\n  errorMessage?: string;\n}\n\nexport interface TrainingDataInfo {\n  datasetSize: number;\n  trainingSize: number;\n  validationSize: number;\n  testSize: number;\n  features: string[];\n  targetVariable: string;\n  dataQuality: DataQualityMetrics;\n}\n\nexport interface DataQualityMetrics {\n  completeness: number;\n  consistency: number;\n  accuracy: number;\n  validity: number;\n  uniqueness: number;\n  missingValues: number;\n  outliers: number;\n}\n\nexport interface ModelDeployment {\n  id: number;\n  modelId: number;\n  modelName: string;\n  version: string;\n  environment: 'development' | 'staging' | 'production';\n  status: 'deploying' | 'deployed' | 'failed' | 'rollback';\n  deployedDate: string;\n  deployedBy: string;\n  configuration: DeploymentConfiguration;\n  healthCheck: HealthCheckResult;\n  metrics: DeploymentMetrics;\n}\n\nexport interface DeploymentConfiguration {\n  replicas: number;\n  cpuLimit: string;\n  memoryLimit: string;\n  autoScaling: boolean;\n  minReplicas: number;\n  maxReplicas: number;\n  targetCpuUtilization: number;\n}\n\nexport interface HealthCheckResult {\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  lastCheck: string;\n  responseTime: number;\n  errorRate: number;\n  uptime: number;\n}\n\nexport interface DeploymentMetrics {\n  requestsPerSecond: number;\n  averageResponseTime: number;\n  errorRate: number;\n  cpuUsage: number;\n  memoryUsage: number;\n  throughput: number;\n}\n\nexport interface ModelComparison {\n  models: ModelComparisonItem[];\n  comparisonMetrics: string[];\n  winner?: number;\n  recommendations: string[];\n}\n\nexport interface ModelComparisonItem {\n  modelId: number;\n  modelName: string;\n  version: string;\n  algorithm: string;\n  metrics: Record<string, number>;\n  rank: number;\n  isWinner: boolean;\n}\n\nexport interface ABTestResult {\n  id: number;\n  testName: string;\n  description: string;\n  startDate: string;\n  endDate?: string;\n  status: 'running' | 'completed' | 'paused' | 'cancelled';\n  models: ABTestModel[];\n  trafficSplit: Record<string, number>;\n  metrics: ABTestMetrics;\n  winner?: number;\n  confidenceLevel: number;\n  isStatisticallySignificant: boolean;\n}\n\nexport interface ABTestModel {\n  modelId: number;\n  modelName: string;\n  version: string;\n  trafficPercentage: number;\n  metrics: Record<string, number>;\n}\n\nexport interface ABTestMetrics {\n  totalUsers: number;\n  totalRecommendations: number;\n  overallCTR: number;\n  overallConversionRate: number;\n  revenueImpact: number;\n  statisticalSignificance: number;\n}\n\nexport interface ModelMonitoring {\n  modelId: number;\n  modelName: string;\n  version: string;\n  monitoringPeriod: string;\n  alerts: ModelAlert[];\n  driftDetection: DriftDetection;\n  performanceDegradation: PerformanceDegradation;\n  dataQuality: DataQualityMonitoring;\n}\n\nexport interface ModelAlert {\n  id: number;\n  type: 'performance' | 'drift' | 'error' | 'resource';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  timestamp: string;\n  isResolved: boolean;\n  resolvedBy?: string;\n  resolvedAt?: string;\n}\n\nexport interface DriftDetection {\n  hasDrift: boolean;\n  driftScore: number;\n  driftType: 'feature' | 'prediction' | 'concept';\n  affectedFeatures: string[];\n  detectionDate: string;\n  severity: 'low' | 'medium' | 'high';\n}\n\nexport interface PerformanceDegradation {\n  hasPerformanceDrop: boolean;\n  currentPerformance: number;\n  baselinePerformance: number;\n  degradationPercentage: number;\n  affectedMetrics: string[];\n  detectionDate: string;\n}\n\nexport interface DataQualityMonitoring {\n  overallScore: number;\n  issues: DataQualityIssue[];\n  trends: DataQualityTrend[];\n}\n\nexport interface DataQualityIssue {\n  type: string;\n  severity: string;\n  description: string;\n  affectedRecords: number;\n  detectionDate: string;\n}\n\nexport interface DataQualityTrend {\n  metric: string;\n  trend: 'improving' | 'stable' | 'degrading';\n  currentValue: number;\n  previousValue: number;\n  changePercentage: number;\n}\n\nexport interface ModelRequest {\n  page?: number;\n  pageSize?: number;\n  search?: string;\n  modelType?: string;\n  status?: string;\n  algorithm?: string;\n  createdBy?: string;\n  sortBy?: string;\n  sortDirection?: 'asc' | 'desc';\n}\n\nexport interface TrainingRequest {\n  modelId: number;\n  hyperparameters?: Record<string, any>;\n  datasetConfig?: Record<string, any>;\n  trainingConfig?: Record<string, any>;\n}\n\nexport interface DeploymentRequest {\n  modelId: number;\n  environment: string;\n  configuration: DeploymentConfiguration;\n}\n\nclass MLModelsService {\n  private readonly baseUrl = '/MLModels';\n\n  async getModels(request: ModelRequest = {}): Promise<PaginatedResponse<MLModel>> {\n    const params = new URLSearchParams();\n    \n    if (request.page) params.append('page', request.page.toString());\n    if (request.pageSize) params.append('pageSize', request.pageSize.toString());\n    if (request.search) params.append('search', request.search);\n    if (request.modelType) params.append('modelType', request.modelType);\n    if (request.status) params.append('status', request.status);\n    if (request.algorithm) params.append('algorithm', request.algorithm);\n    if (request.createdBy) params.append('createdBy', request.createdBy);\n    if (request.sortBy) params.append('sortBy', request.sortBy);\n    if (request.sortDirection) params.append('sortDirection', request.sortDirection);\n\n    const response = await api.get<ApiResponse<PaginatedResponse<MLModel>>>(\n      `${this.baseUrl}?${params.toString()}`\n    );\n    return response.data.data;\n  }\n\n  async getModel(id: number): Promise<MLModel> {\n    const response = await api.get<ApiResponse<MLModel>>(`${this.baseUrl}/${id}`);\n    return response.data.data;\n  }\n\n  async createModel(model: Partial<MLModel>): Promise<MLModel> {\n    const response = await api.post<ApiResponse<MLModel>>(`${this.baseUrl}`, model);\n    return response.data.data;\n  }\n\n  async updateModel(id: number, model: Partial<MLModel>): Promise<MLModel> {\n    const response = await api.put<ApiResponse<MLModel>>(`${this.baseUrl}/${id}`, model);\n    return response.data.data;\n  }\n\n  async deleteModel(id: number): Promise<void> {\n    await api.delete(`${this.baseUrl}/${id}`);\n  }\n\n  async getModelPerformance(id: number): Promise<ModelPerformanceMetrics> {\n    const response = await api.get<ApiResponse<ModelPerformanceMetrics>>(\n      `${this.baseUrl}/${id}/performance`\n    );\n    return response.data.data;\n  }\n\n  async trainModel(request: TrainingRequest): Promise<ModelTrainingJob> {\n    const response = await api.post<ApiResponse<ModelTrainingJob>>(\n      `${this.baseUrl}/${request.modelId}/train`,\n      request\n    );\n    return response.data.data;\n  }\n\n  async getTrainingJobs(modelId?: number): Promise<ModelTrainingJob[]> {\n    const url = modelId \n      ? `${this.baseUrl}/${modelId}/training-jobs`\n      : `${this.baseUrl}/training-jobs`;\n    \n    const response = await api.get<ApiResponse<ModelTrainingJob[]>>(url);\n    return response.data.data;\n  }\n\n  async getTrainingJob(jobId: number): Promise<ModelTrainingJob> {\n    const response = await api.get<ApiResponse<ModelTrainingJob>>(\n      `${this.baseUrl}/training-jobs/${jobId}`\n    );\n    return response.data.data;\n  }\n\n  async deployModel(request: DeploymentRequest): Promise<ModelDeployment> {\n    const response = await api.post<ApiResponse<ModelDeployment>>(\n      `${this.baseUrl}/${request.modelId}/deploy`,\n      request\n    );\n    return response.data.data;\n  }\n\n  async getDeployments(modelId?: number): Promise<ModelDeployment[]> {\n    const url = modelId \n      ? `${this.baseUrl}/${modelId}/deployments`\n      : `${this.baseUrl}/deployments`;\n    \n    const response = await api.get<ApiResponse<ModelDeployment[]>>(url);\n    return response.data.data;\n  }\n\n  async compareModels(modelIds: number[]): Promise<ModelComparison> {\n    const response = await api.post<ApiResponse<ModelComparison>>(\n      `${this.baseUrl}/compare`,\n      { modelIds }\n    );\n    return response.data.data;\n  }\n\n  async getABTests(): Promise<ABTestResult[]> {\n    const response = await api.get<ApiResponse<ABTestResult[]>>(`${this.baseUrl}/ab-tests`);\n    return response.data.data;\n  }\n\n  async createABTest(test: Partial<ABTestResult>): Promise<ABTestResult> {\n    const response = await api.post<ApiResponse<ABTestResult>>(`${this.baseUrl}/ab-tests`, test);\n    return response.data.data;\n  }\n\n  async getModelMonitoring(modelId: number): Promise<ModelMonitoring> {\n    const response = await api.get<ApiResponse<ModelMonitoring>>(\n      `${this.baseUrl}/${modelId}/monitoring`\n    );\n    return response.data.data;\n  }\n}\n\nexport const mlModelsService = new MLModelsService();\n"],"names":["MLModelsService","__publicField","request","params","api","id","model","modelId","url","jobId","modelIds","test","mlModelsService"],"mappings":"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"}